// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/ngapi/dsetapi/dset.proto

package dsetapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A capture summary - this is the data that you will recieve for any query that
// returns captures.
type CapSummary struct {
	// The globally unique ID for this capture.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The URL under which this capture's static assets can be found.
	Assets string `protobuf:"bytes,2,opt,name=assets,proto3" json:"assets,omitempty"`
	// The roots for each URL in the capture plan.
	Roots []*CapSummary_Root `protobuf:"bytes,3,rep,name=roots,proto3" json:"roots,omitempty"`
	// The time of capture.
	Time *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// The capture plan.
	Plan *CapSummary_Plan `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
	// Some basic statistics on the resulting capture.
	Stats                *CapSummary_Stats `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CapSummary) Reset()         { *m = CapSummary{} }
func (m *CapSummary) String() string { return proto.CompactTextString(m) }
func (*CapSummary) ProtoMessage()    {}
func (*CapSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{0}
}
func (m *CapSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapSummary.Unmarshal(m, b)
}
func (m *CapSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapSummary.Marshal(b, m, deterministic)
}
func (dst *CapSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapSummary.Merge(dst, src)
}
func (m *CapSummary) XXX_Size() int {
	return xxx_messageInfo_CapSummary.Size(m)
}
func (m *CapSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_CapSummary.DiscardUnknown(m)
}

var xxx_messageInfo_CapSummary proto.InternalMessageInfo

func (m *CapSummary) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CapSummary) GetAssets() string {
	if m != nil {
		return m.Assets
	}
	return ""
}

func (m *CapSummary) GetRoots() []*CapSummary_Root {
	if m != nil {
		return m.Roots
	}
	return nil
}

func (m *CapSummary) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *CapSummary) GetPlan() *CapSummary_Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *CapSummary) GetStats() *CapSummary_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type CapSummary_Plan struct {
	// URLs submitted for capture.
	Urls                 []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapSummary_Plan) Reset()         { *m = CapSummary_Plan{} }
func (m *CapSummary_Plan) String() string { return proto.CompactTextString(m) }
func (*CapSummary_Plan) ProtoMessage()    {}
func (*CapSummary_Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{0, 0}
}
func (m *CapSummary_Plan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapSummary_Plan.Unmarshal(m, b)
}
func (m *CapSummary_Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapSummary_Plan.Marshal(b, m, deterministic)
}
func (dst *CapSummary_Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapSummary_Plan.Merge(dst, src)
}
func (m *CapSummary_Plan) XXX_Size() int {
	return xxx_messageInfo_CapSummary_Plan.Size(m)
}
func (m *CapSummary_Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_CapSummary_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_CapSummary_Plan proto.InternalMessageInfo

func (m *CapSummary_Plan) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

// Roots that resulted from loading a URL in the the submitted plan. You can
// think of this as the trajectory of redirections followed to reach the
// final resting URL.
type CapSummary_Root struct {
	Urls                 []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapSummary_Root) Reset()         { *m = CapSummary_Root{} }
func (m *CapSummary_Root) String() string { return proto.CompactTextString(m) }
func (*CapSummary_Root) ProtoMessage()    {}
func (*CapSummary_Root) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{0, 1}
}
func (m *CapSummary_Root) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapSummary_Root.Unmarshal(m, b)
}
func (m *CapSummary_Root) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapSummary_Root.Marshal(b, m, deterministic)
}
func (dst *CapSummary_Root) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapSummary_Root.Merge(dst, src)
}
func (m *CapSummary_Root) XXX_Size() int {
	return xxx_messageInfo_CapSummary_Root.Size(m)
}
func (m *CapSummary_Root) XXX_DiscardUnknown() {
	xxx_messageInfo_CapSummary_Root.DiscardUnknown(m)
}

var xxx_messageInfo_CapSummary_Root proto.InternalMessageInfo

func (m *CapSummary_Root) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type CapSummary_Stats struct {
	// Th enumber of flows.
	Flows int32 `protobuf:"varint,1,opt,name=flows,proto3" json:"flows,omitempty"`
	// The number of websocket connections.
	Websockets int32 `protobuf:"varint,2,opt,name=websockets,proto3" json:"websockets,omitempty"`
	// The number of distinct hosts.
	Hosts                int32    `protobuf:"varint,3,opt,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapSummary_Stats) Reset()         { *m = CapSummary_Stats{} }
func (m *CapSummary_Stats) String() string { return proto.CompactTextString(m) }
func (*CapSummary_Stats) ProtoMessage()    {}
func (*CapSummary_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{0, 2}
}
func (m *CapSummary_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapSummary_Stats.Unmarshal(m, b)
}
func (m *CapSummary_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapSummary_Stats.Marshal(b, m, deterministic)
}
func (dst *CapSummary_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapSummary_Stats.Merge(dst, src)
}
func (m *CapSummary_Stats) XXX_Size() int {
	return xxx_messageInfo_CapSummary_Stats.Size(m)
}
func (m *CapSummary_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_CapSummary_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_CapSummary_Stats proto.InternalMessageInfo

func (m *CapSummary_Stats) GetFlows() int32 {
	if m != nil {
		return m.Flows
	}
	return 0
}

func (m *CapSummary_Stats) GetWebsockets() int32 {
	if m != nil {
		return m.Websockets
	}
	return 0
}

func (m *CapSummary_Stats) GetHosts() int32 {
	if m != nil {
		return m.Hosts
	}
	return 0
}

// Metadata is arbitrary information associated with a capture.
type Metadata struct {
	// The key for this metadata pair. Keys do not have to be unique.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value for this metadata pair.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{1}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Metadata) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CaptureInfoRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// The unique ID of the capture.
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CaptureInfoRequest) Reset()         { *m = CaptureInfoRequest{} }
func (m *CaptureInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CaptureInfoRequest) ProtoMessage()    {}
func (*CaptureInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{2}
}
func (m *CaptureInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptureInfoRequest.Unmarshal(m, b)
}
func (m *CaptureInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptureInfoRequest.Marshal(b, m, deterministic)
}
func (dst *CaptureInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptureInfoRequest.Merge(dst, src)
}
func (m *CaptureInfoRequest) XXX_Size() int {
	return xxx_messageInfo_CaptureInfoRequest.Size(m)
}
func (m *CaptureInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptureInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CaptureInfoRequest proto.InternalMessageInfo

func (m *CaptureInfoRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *CaptureInfoRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CaptureInfoResult struct {
	// A capture summary for this result.
	Capsummary           *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CaptureInfoResult) Reset()         { *m = CaptureInfoResult{} }
func (m *CaptureInfoResult) String() string { return proto.CompactTextString(m) }
func (*CaptureInfoResult) ProtoMessage()    {}
func (*CaptureInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{3}
}
func (m *CaptureInfoResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptureInfoResult.Unmarshal(m, b)
}
func (m *CaptureInfoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptureInfoResult.Marshal(b, m, deterministic)
}
func (dst *CaptureInfoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptureInfoResult.Merge(dst, src)
}
func (m *CaptureInfoResult) XXX_Size() int {
	return xxx_messageInfo_CaptureInfoResult.Size(m)
}
func (m *CaptureInfoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptureInfoResult.DiscardUnknown(m)
}

var xxx_messageInfo_CaptureInfoResult proto.InternalMessageInfo

func (m *CaptureInfoResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

type CaptureLogRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	// The capture log is in reverse chronological order, so the start of the
	// range is the most recent time. If start is zero, it's taken to be the
	// largest possible time value.
	Start *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	// The capture log is in reverse chronological order, so the end of the
	// range is the least recent time. If end is zero, it's taken to be the
	// smallest possible time value.
	End                  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CaptureLogRequest) Reset()         { *m = CaptureLogRequest{} }
func (m *CaptureLogRequest) String() string { return proto.CompactTextString(m) }
func (*CaptureLogRequest) ProtoMessage()    {}
func (*CaptureLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{4}
}
func (m *CaptureLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptureLogRequest.Unmarshal(m, b)
}
func (m *CaptureLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptureLogRequest.Marshal(b, m, deterministic)
}
func (dst *CaptureLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptureLogRequest.Merge(dst, src)
}
func (m *CaptureLogRequest) XXX_Size() int {
	return xxx_messageInfo_CaptureLogRequest.Size(m)
}
func (m *CaptureLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptureLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CaptureLogRequest proto.InternalMessageInfo

func (m *CaptureLogRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *CaptureLogRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CaptureLogRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

func (m *CaptureLogRequest) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *CaptureLogRequest) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

type CaptureLogResult struct {
	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CaptureLogResult) Reset()         { *m = CaptureLogResult{} }
func (m *CaptureLogResult) String() string { return proto.CompactTextString(m) }
func (*CaptureLogResult) ProtoMessage()    {}
func (*CaptureLogResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{5}
}
func (m *CaptureLogResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptureLogResult.Unmarshal(m, b)
}
func (m *CaptureLogResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptureLogResult.Marshal(b, m, deterministic)
}
func (dst *CaptureLogResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptureLogResult.Merge(dst, src)
}
func (m *CaptureLogResult) XXX_Size() int {
	return xxx_messageInfo_CaptureLogResult.Size(m)
}
func (m *CaptureLogResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptureLogResult.DiscardUnknown(m)
}

var xxx_messageInfo_CaptureLogResult proto.InternalMessageInfo

func (m *CaptureLogResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

func (m *CaptureLogResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type DomainHistoryRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Domain  string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// Limit the number of records that will be returned.
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainHistoryRequest) Reset()         { *m = DomainHistoryRequest{} }
func (m *DomainHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*DomainHistoryRequest) ProtoMessage()    {}
func (*DomainHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{6}
}
func (m *DomainHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainHistoryRequest.Unmarshal(m, b)
}
func (m *DomainHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainHistoryRequest.Marshal(b, m, deterministic)
}
func (dst *DomainHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainHistoryRequest.Merge(dst, src)
}
func (m *DomainHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_DomainHistoryRequest.Size(m)
}
func (m *DomainHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DomainHistoryRequest proto.InternalMessageInfo

func (m *DomainHistoryRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *DomainHistoryRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DomainHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type DomainHistoryResult struct {
	// A capture summary for this result.
	Capsummary           *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DomainHistoryResult) Reset()         { *m = DomainHistoryResult{} }
func (m *DomainHistoryResult) String() string { return proto.CompactTextString(m) }
func (*DomainHistoryResult) ProtoMessage()    {}
func (*DomainHistoryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{7}
}
func (m *DomainHistoryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainHistoryResult.Unmarshal(m, b)
}
func (m *DomainHistoryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainHistoryResult.Marshal(b, m, deterministic)
}
func (dst *DomainHistoryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainHistoryResult.Merge(dst, src)
}
func (m *DomainHistoryResult) XXX_Size() int {
	return xxx_messageInfo_DomainHistoryResult.Size(m)
}
func (m *DomainHistoryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainHistoryResult.DiscardUnknown(m)
}

var xxx_messageInfo_DomainHistoryResult proto.InternalMessageInfo

func (m *DomainHistoryResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

type DomainSearchRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// A domain query. This is a domain prefix, which will return results for
	// all relevant subdomains. To search for an exact domain, prefix with "$" -
	// e.g. "$rt.com".
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainSearchRequest) Reset()         { *m = DomainSearchRequest{} }
func (m *DomainSearchRequest) String() string { return proto.CompactTextString(m) }
func (*DomainSearchRequest) ProtoMessage()    {}
func (*DomainSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{8}
}
func (m *DomainSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainSearchRequest.Unmarshal(m, b)
}
func (m *DomainSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainSearchRequest.Marshal(b, m, deterministic)
}
func (dst *DomainSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainSearchRequest.Merge(dst, src)
}
func (m *DomainSearchRequest) XXX_Size() int {
	return xxx_messageInfo_DomainSearchRequest.Size(m)
}
func (m *DomainSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DomainSearchRequest proto.InternalMessageInfo

func (m *DomainSearchRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *DomainSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DomainSearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DomainSearchRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type DomainSearchResult struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// THe latest capture relevant to this result.
	Latestcapture        *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DomainSearchResult) Reset()         { *m = DomainSearchResult{} }
func (m *DomainSearchResult) String() string { return proto.CompactTextString(m) }
func (*DomainSearchResult) ProtoMessage()    {}
func (*DomainSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{9}
}
func (m *DomainSearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainSearchResult.Unmarshal(m, b)
}
func (m *DomainSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainSearchResult.Marshal(b, m, deterministic)
}
func (dst *DomainSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainSearchResult.Merge(dst, src)
}
func (m *DomainSearchResult) XXX_Size() int {
	return xxx_messageInfo_DomainSearchResult.Size(m)
}
func (m *DomainSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_DomainSearchResult proto.InternalMessageInfo

func (m *DomainSearchResult) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DomainSearchResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

func (m *DomainSearchResult) GetLatestcapture() *CapSummary {
	if m != nil {
		return m.Latestcapture
	}
	return nil
}

type DomainsForIPRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainsForIPRequest) Reset()         { *m = DomainsForIPRequest{} }
func (m *DomainsForIPRequest) String() string { return proto.CompactTextString(m) }
func (*DomainsForIPRequest) ProtoMessage()    {}
func (*DomainsForIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{10}
}
func (m *DomainsForIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainsForIPRequest.Unmarshal(m, b)
}
func (m *DomainsForIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainsForIPRequest.Marshal(b, m, deterministic)
}
func (dst *DomainsForIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainsForIPRequest.Merge(dst, src)
}
func (m *DomainsForIPRequest) XXX_Size() int {
	return xxx_messageInfo_DomainsForIPRequest.Size(m)
}
func (m *DomainsForIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainsForIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DomainsForIPRequest proto.InternalMessageInfo

func (m *DomainsForIPRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *DomainsForIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DomainsForIPRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DomainsForIPRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type DomainsForIPResult struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// THe latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	Associations  []string    `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainsForIPResult) Reset()         { *m = DomainsForIPResult{} }
func (m *DomainsForIPResult) String() string { return proto.CompactTextString(m) }
func (*DomainsForIPResult) ProtoMessage()    {}
func (*DomainsForIPResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{11}
}
func (m *DomainsForIPResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainsForIPResult.Unmarshal(m, b)
}
func (m *DomainsForIPResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainsForIPResult.Marshal(b, m, deterministic)
}
func (dst *DomainsForIPResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainsForIPResult.Merge(dst, src)
}
func (m *DomainsForIPResult) XXX_Size() int {
	return xxx_messageInfo_DomainsForIPResult.Size(m)
}
func (m *DomainsForIPResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainsForIPResult.DiscardUnknown(m)
}

var xxx_messageInfo_DomainsForIPResult proto.InternalMessageInfo

func (m *DomainsForIPResult) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DomainsForIPResult) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DomainsForIPResult) GetLatestcapture() *CapSummary {
	if m != nil {
		return m.Latestcapture
	}
	return nil
}

func (m *DomainsForIPResult) GetAssociations() []string {
	if m != nil {
		return m.Associations
	}
	return nil
}

func (m *DomainsForIPResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type IPHistoryRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Limit the number of records that will be returned.
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPHistoryRequest) Reset()         { *m = IPHistoryRequest{} }
func (m *IPHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*IPHistoryRequest) ProtoMessage()    {}
func (*IPHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{12}
}
func (m *IPHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPHistoryRequest.Unmarshal(m, b)
}
func (m *IPHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPHistoryRequest.Marshal(b, m, deterministic)
}
func (dst *IPHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPHistoryRequest.Merge(dst, src)
}
func (m *IPHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_IPHistoryRequest.Size(m)
}
func (m *IPHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPHistoryRequest proto.InternalMessageInfo

func (m *IPHistoryRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *IPHistoryRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type IPHistoryResult struct {
	// A capture summary for this result.
	Capsummary           *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *IPHistoryResult) Reset()         { *m = IPHistoryResult{} }
func (m *IPHistoryResult) String() string { return proto.CompactTextString(m) }
func (*IPHistoryResult) ProtoMessage()    {}
func (*IPHistoryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{13}
}
func (m *IPHistoryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPHistoryResult.Unmarshal(m, b)
}
func (m *IPHistoryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPHistoryResult.Marshal(b, m, deterministic)
}
func (dst *IPHistoryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPHistoryResult.Merge(dst, src)
}
func (m *IPHistoryResult) XXX_Size() int {
	return xxx_messageInfo_IPHistoryResult.Size(m)
}
func (m *IPHistoryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_IPHistoryResult.DiscardUnknown(m)
}

var xxx_messageInfo_IPHistoryResult proto.InternalMessageInfo

func (m *IPHistoryResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

type IPLogSearchRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPLogSearchRequest) Reset()         { *m = IPLogSearchRequest{} }
func (m *IPLogSearchRequest) String() string { return proto.CompactTextString(m) }
func (*IPLogSearchRequest) ProtoMessage()    {}
func (*IPLogSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{14}
}
func (m *IPLogSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPLogSearchRequest.Unmarshal(m, b)
}
func (m *IPLogSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPLogSearchRequest.Marshal(b, m, deterministic)
}
func (dst *IPLogSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPLogSearchRequest.Merge(dst, src)
}
func (m *IPLogSearchRequest) XXX_Size() int {
	return xxx_messageInfo_IPLogSearchRequest.Size(m)
}
func (m *IPLogSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPLogSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPLogSearchRequest proto.InternalMessageInfo

func (m *IPLogSearchRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *IPLogSearchRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPLogSearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *IPLogSearchRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type IPLogSearchResult struct {
	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	Ip         string      `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPLogSearchResult) Reset()         { *m = IPLogSearchResult{} }
func (m *IPLogSearchResult) String() string { return proto.CompactTextString(m) }
func (*IPLogSearchResult) ProtoMessage()    {}
func (*IPLogSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{15}
}
func (m *IPLogSearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPLogSearchResult.Unmarshal(m, b)
}
func (m *IPLogSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPLogSearchResult.Marshal(b, m, deterministic)
}
func (dst *IPLogSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPLogSearchResult.Merge(dst, src)
}
func (m *IPLogSearchResult) XXX_Size() int {
	return xxx_messageInfo_IPLogSearchResult.Size(m)
}
func (m *IPLogSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_IPLogSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_IPLogSearchResult proto.InternalMessageInfo

func (m *IPLogSearchResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

func (m *IPLogSearchResult) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPLogSearchResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type IPSearchResult struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// THe latest capture relevant to this result.
	Latestcapture        *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *IPSearchResult) Reset()         { *m = IPSearchResult{} }
func (m *IPSearchResult) String() string { return proto.CompactTextString(m) }
func (*IPSearchResult) ProtoMessage()    {}
func (*IPSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{16}
}
func (m *IPSearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPSearchResult.Unmarshal(m, b)
}
func (m *IPSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPSearchResult.Marshal(b, m, deterministic)
}
func (dst *IPSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSearchResult.Merge(dst, src)
}
func (m *IPSearchResult) XXX_Size() int {
	return xxx_messageInfo_IPSearchResult.Size(m)
}
func (m *IPSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_IPSearchResult proto.InternalMessageInfo

func (m *IPSearchResult) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPSearchResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

func (m *IPSearchResult) GetLatestcapture() *CapSummary {
	if m != nil {
		return m.Latestcapture
	}
	return nil
}

type IPSearchRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask    int32  `protobuf:"varint,3,opt,name=mask,proto3" json:"mask,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPSearchRequest) Reset()         { *m = IPSearchRequest{} }
func (m *IPSearchRequest) String() string { return proto.CompactTextString(m) }
func (*IPSearchRequest) ProtoMessage()    {}
func (*IPSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{17}
}
func (m *IPSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPSearchRequest.Unmarshal(m, b)
}
func (m *IPSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPSearchRequest.Marshal(b, m, deterministic)
}
func (dst *IPSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSearchRequest.Merge(dst, src)
}
func (m *IPSearchRequest) XXX_Size() int {
	return xxx_messageInfo_IPSearchRequest.Size(m)
}
func (m *IPSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPSearchRequest proto.InternalMessageInfo

func (m *IPSearchRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *IPSearchRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPSearchRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *IPSearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *IPSearchRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type IPsForDomainRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPsForDomainRequest) Reset()         { *m = IPsForDomainRequest{} }
func (m *IPsForDomainRequest) String() string { return proto.CompactTextString(m) }
func (*IPsForDomainRequest) ProtoMessage()    {}
func (*IPsForDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{18}
}
func (m *IPsForDomainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPsForDomainRequest.Unmarshal(m, b)
}
func (m *IPsForDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPsForDomainRequest.Marshal(b, m, deterministic)
}
func (dst *IPsForDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPsForDomainRequest.Merge(dst, src)
}
func (m *IPsForDomainRequest) XXX_Size() int {
	return xxx_messageInfo_IPsForDomainRequest.Size(m)
}
func (m *IPsForDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPsForDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPsForDomainRequest proto.InternalMessageInfo

func (m *IPsForDomainRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *IPsForDomainRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *IPsForDomainRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *IPsForDomainRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type IPsForDomainResult struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// THe latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	Associations  []string    `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPsForDomainResult) Reset()         { *m = IPsForDomainResult{} }
func (m *IPsForDomainResult) String() string { return proto.CompactTextString(m) }
func (*IPsForDomainResult) ProtoMessage()    {}
func (*IPsForDomainResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{19}
}
func (m *IPsForDomainResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPsForDomainResult.Unmarshal(m, b)
}
func (m *IPsForDomainResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPsForDomainResult.Marshal(b, m, deterministic)
}
func (dst *IPsForDomainResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPsForDomainResult.Merge(dst, src)
}
func (m *IPsForDomainResult) XXX_Size() int {
	return xxx_messageInfo_IPsForDomainResult.Size(m)
}
func (m *IPsForDomainResult) XXX_DiscardUnknown() {
	xxx_messageInfo_IPsForDomainResult.DiscardUnknown(m)
}

var xxx_messageInfo_IPsForDomainResult proto.InternalMessageInfo

func (m *IPsForDomainResult) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *IPsForDomainResult) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPsForDomainResult) GetLatestcapture() *CapSummary {
	if m != nil {
		return m.Latestcapture
	}
	return nil
}

func (m *IPsForDomainResult) GetAssociations() []string {
	if m != nil {
		return m.Associations
	}
	return nil
}

func (m *IPsForDomainResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type MetaForCaptureRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaForCaptureRequest) Reset()         { *m = MetaForCaptureRequest{} }
func (m *MetaForCaptureRequest) String() string { return proto.CompactTextString(m) }
func (*MetaForCaptureRequest) ProtoMessage()    {}
func (*MetaForCaptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{20}
}
func (m *MetaForCaptureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaForCaptureRequest.Unmarshal(m, b)
}
func (m *MetaForCaptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaForCaptureRequest.Marshal(b, m, deterministic)
}
func (dst *MetaForCaptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaForCaptureRequest.Merge(dst, src)
}
func (m *MetaForCaptureRequest) XXX_Size() int {
	return xxx_messageInfo_MetaForCaptureRequest.Size(m)
}
func (m *MetaForCaptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaForCaptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetaForCaptureRequest proto.InternalMessageInfo

func (m *MetaForCaptureRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *MetaForCaptureRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MetaForCaptureRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MetaForCaptureRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type MetaForCaptureResult struct {
	Meta *Metadata            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaForCaptureResult) Reset()         { *m = MetaForCaptureResult{} }
func (m *MetaForCaptureResult) String() string { return proto.CompactTextString(m) }
func (*MetaForCaptureResult) ProtoMessage()    {}
func (*MetaForCaptureResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{21}
}
func (m *MetaForCaptureResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaForCaptureResult.Unmarshal(m, b)
}
func (m *MetaForCaptureResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaForCaptureResult.Marshal(b, m, deterministic)
}
func (dst *MetaForCaptureResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaForCaptureResult.Merge(dst, src)
}
func (m *MetaForCaptureResult) XXX_Size() int {
	return xxx_messageInfo_MetaForCaptureResult.Size(m)
}
func (m *MetaForCaptureResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaForCaptureResult.DiscardUnknown(m)
}

var xxx_messageInfo_MetaForCaptureResult proto.InternalMessageInfo

func (m *MetaForCaptureResult) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MetaForCaptureResult) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *MetaForCaptureResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type MetaSearchRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaSearchRequest) Reset()         { *m = MetaSearchRequest{} }
func (m *MetaSearchRequest) String() string { return proto.CompactTextString(m) }
func (*MetaSearchRequest) ProtoMessage()    {}
func (*MetaSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{22}
}
func (m *MetaSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaSearchRequest.Unmarshal(m, b)
}
func (m *MetaSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaSearchRequest.Marshal(b, m, deterministic)
}
func (dst *MetaSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaSearchRequest.Merge(dst, src)
}
func (m *MetaSearchRequest) XXX_Size() int {
	return xxx_messageInfo_MetaSearchRequest.Size(m)
}
func (m *MetaSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetaSearchRequest proto.InternalMessageInfo

func (m *MetaSearchRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *MetaSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *MetaSearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MetaSearchRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type MetaSearchResult struct {
	Meta *Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary           *CapSummary `protobuf:"bytes,4,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetaSearchResult) Reset()         { *m = MetaSearchResult{} }
func (m *MetaSearchResult) String() string { return proto.CompactTextString(m) }
func (*MetaSearchResult) ProtoMessage()    {}
func (*MetaSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{23}
}
func (m *MetaSearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaSearchResult.Unmarshal(m, b)
}
func (m *MetaSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaSearchResult.Marshal(b, m, deterministic)
}
func (dst *MetaSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaSearchResult.Merge(dst, src)
}
func (m *MetaSearchResult) XXX_Size() int {
	return xxx_messageInfo_MetaSearchResult.Size(m)
}
func (m *MetaSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_MetaSearchResult proto.InternalMessageInfo

func (m *MetaSearchResult) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MetaSearchResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

func (m *MetaSearchResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

type RedirsByDestinationRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedirsByDestinationRequest) Reset()         { *m = RedirsByDestinationRequest{} }
func (m *RedirsByDestinationRequest) String() string { return proto.CompactTextString(m) }
func (*RedirsByDestinationRequest) ProtoMessage()    {}
func (*RedirsByDestinationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{24}
}
func (m *RedirsByDestinationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedirsByDestinationRequest.Unmarshal(m, b)
}
func (m *RedirsByDestinationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedirsByDestinationRequest.Marshal(b, m, deterministic)
}
func (dst *RedirsByDestinationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirsByDestinationRequest.Merge(dst, src)
}
func (m *RedirsByDestinationRequest) XXX_Size() int {
	return xxx_messageInfo_RedirsByDestinationRequest.Size(m)
}
func (m *RedirsByDestinationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirsByDestinationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RedirsByDestinationRequest proto.InternalMessageInfo

func (m *RedirsByDestinationRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *RedirsByDestinationRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *RedirsByDestinationRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RedirsByDestinationRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type RedirsByDestinationResult struct {
	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// THe latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedirsByDestinationResult) Reset()         { *m = RedirsByDestinationResult{} }
func (m *RedirsByDestinationResult) String() string { return proto.CompactTextString(m) }
func (*RedirsByDestinationResult) ProtoMessage()    {}
func (*RedirsByDestinationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{25}
}
func (m *RedirsByDestinationResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedirsByDestinationResult.Unmarshal(m, b)
}
func (m *RedirsByDestinationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedirsByDestinationResult.Marshal(b, m, deterministic)
}
func (dst *RedirsByDestinationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirsByDestinationResult.Merge(dst, src)
}
func (m *RedirsByDestinationResult) XXX_Size() int {
	return xxx_messageInfo_RedirsByDestinationResult.Size(m)
}
func (m *RedirsByDestinationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirsByDestinationResult.DiscardUnknown(m)
}

var xxx_messageInfo_RedirsByDestinationResult proto.InternalMessageInfo

func (m *RedirsByDestinationResult) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RedirsByDestinationResult) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *RedirsByDestinationResult) GetLatestcapture() *CapSummary {
	if m != nil {
		return m.Latestcapture
	}
	return nil
}

func (m *RedirsByDestinationResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type RedirsBySourceRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedirsBySourceRequest) Reset()         { *m = RedirsBySourceRequest{} }
func (m *RedirsBySourceRequest) String() string { return proto.CompactTextString(m) }
func (*RedirsBySourceRequest) ProtoMessage()    {}
func (*RedirsBySourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{26}
}
func (m *RedirsBySourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedirsBySourceRequest.Unmarshal(m, b)
}
func (m *RedirsBySourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedirsBySourceRequest.Marshal(b, m, deterministic)
}
func (dst *RedirsBySourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirsBySourceRequest.Merge(dst, src)
}
func (m *RedirsBySourceRequest) XXX_Size() int {
	return xxx_messageInfo_RedirsBySourceRequest.Size(m)
}
func (m *RedirsBySourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirsBySourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RedirsBySourceRequest proto.InternalMessageInfo

func (m *RedirsBySourceRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *RedirsBySourceRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *RedirsBySourceRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RedirsBySourceRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type RedirsBySourceResult struct {
	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// THe latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedirsBySourceResult) Reset()         { *m = RedirsBySourceResult{} }
func (m *RedirsBySourceResult) String() string { return proto.CompactTextString(m) }
func (*RedirsBySourceResult) ProtoMessage()    {}
func (*RedirsBySourceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{27}
}
func (m *RedirsBySourceResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedirsBySourceResult.Unmarshal(m, b)
}
func (m *RedirsBySourceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedirsBySourceResult.Marshal(b, m, deterministic)
}
func (dst *RedirsBySourceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirsBySourceResult.Merge(dst, src)
}
func (m *RedirsBySourceResult) XXX_Size() int {
	return xxx_messageInfo_RedirsBySourceResult.Size(m)
}
func (m *RedirsBySourceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirsBySourceResult.DiscardUnknown(m)
}

var xxx_messageInfo_RedirsBySourceResult proto.InternalMessageInfo

func (m *RedirsBySourceResult) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RedirsBySourceResult) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *RedirsBySourceResult) GetLatestcapture() *CapSummary {
	if m != nil {
		return m.Latestcapture
	}
	return nil
}

func (m *RedirsBySourceResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type RootLogSearchRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RootLogSearchRequest) Reset()         { *m = RootLogSearchRequest{} }
func (m *RootLogSearchRequest) String() string { return proto.CompactTextString(m) }
func (*RootLogSearchRequest) ProtoMessage()    {}
func (*RootLogSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{28}
}
func (m *RootLogSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootLogSearchRequest.Unmarshal(m, b)
}
func (m *RootLogSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootLogSearchRequest.Marshal(b, m, deterministic)
}
func (dst *RootLogSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootLogSearchRequest.Merge(dst, src)
}
func (m *RootLogSearchRequest) XXX_Size() int {
	return xxx_messageInfo_RootLogSearchRequest.Size(m)
}
func (m *RootLogSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RootLogSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RootLogSearchRequest proto.InternalMessageInfo

func (m *RootLogSearchRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *RootLogSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *RootLogSearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RootLogSearchRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type RootLogSearchResult struct {
	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary           *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RootLogSearchResult) Reset()         { *m = RootLogSearchResult{} }
func (m *RootLogSearchResult) String() string { return proto.CompactTextString(m) }
func (*RootLogSearchResult) ProtoMessage()    {}
func (*RootLogSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{29}
}
func (m *RootLogSearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootLogSearchResult.Unmarshal(m, b)
}
func (m *RootLogSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootLogSearchResult.Marshal(b, m, deterministic)
}
func (dst *RootLogSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootLogSearchResult.Merge(dst, src)
}
func (m *RootLogSearchResult) XXX_Size() int {
	return xxx_messageInfo_RootLogSearchResult.Size(m)
}
func (m *RootLogSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RootLogSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_RootLogSearchResult proto.InternalMessageInfo

func (m *RootLogSearchResult) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *RootLogSearchResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

func (m *RootLogSearchResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

type RootsForSatelliteRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RootsForSatelliteRequest) Reset()         { *m = RootsForSatelliteRequest{} }
func (m *RootsForSatelliteRequest) String() string { return proto.CompactTextString(m) }
func (*RootsForSatelliteRequest) ProtoMessage()    {}
func (*RootsForSatelliteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{30}
}
func (m *RootsForSatelliteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootsForSatelliteRequest.Unmarshal(m, b)
}
func (m *RootsForSatelliteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootsForSatelliteRequest.Marshal(b, m, deterministic)
}
func (dst *RootsForSatelliteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootsForSatelliteRequest.Merge(dst, src)
}
func (m *RootsForSatelliteRequest) XXX_Size() int {
	return xxx_messageInfo_RootsForSatelliteRequest.Size(m)
}
func (m *RootsForSatelliteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RootsForSatelliteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RootsForSatelliteRequest proto.InternalMessageInfo

func (m *RootsForSatelliteRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *RootsForSatelliteRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *RootsForSatelliteRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RootsForSatelliteRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type RootsForSatelliteResult struct {
	Root      string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Satellite string `protobuf:"bytes,2,opt,name=satellite,proto3" json:"satellite,omitempty"`
	// A capture summary for this result.
	Capsummary   *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	Associations []string    `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RootsForSatelliteResult) Reset()         { *m = RootsForSatelliteResult{} }
func (m *RootsForSatelliteResult) String() string { return proto.CompactTextString(m) }
func (*RootsForSatelliteResult) ProtoMessage()    {}
func (*RootsForSatelliteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{31}
}
func (m *RootsForSatelliteResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootsForSatelliteResult.Unmarshal(m, b)
}
func (m *RootsForSatelliteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootsForSatelliteResult.Marshal(b, m, deterministic)
}
func (dst *RootsForSatelliteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootsForSatelliteResult.Merge(dst, src)
}
func (m *RootsForSatelliteResult) XXX_Size() int {
	return xxx_messageInfo_RootsForSatelliteResult.Size(m)
}
func (m *RootsForSatelliteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RootsForSatelliteResult.DiscardUnknown(m)
}

var xxx_messageInfo_RootsForSatelliteResult proto.InternalMessageInfo

func (m *RootsForSatelliteResult) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *RootsForSatelliteResult) GetSatellite() string {
	if m != nil {
		return m.Satellite
	}
	return ""
}

func (m *RootsForSatelliteResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

func (m *RootsForSatelliteResult) GetAssociations() []string {
	if m != nil {
		return m.Associations
	}
	return nil
}

func (m *RootsForSatelliteResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type SubmitCaptureRequest struct {
	// The name of the dataset to query.
	Dataset              string      `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Notification         string      `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	Urls                 []string    `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	Meta                 []*Metadata `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty"`
	Skiprecent           int64       `protobuf:"varint,5,opt,name=skiprecent,proto3" json:"skiprecent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SubmitCaptureRequest) Reset()         { *m = SubmitCaptureRequest{} }
func (m *SubmitCaptureRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitCaptureRequest) ProtoMessage()    {}
func (*SubmitCaptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{32}
}
func (m *SubmitCaptureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitCaptureRequest.Unmarshal(m, b)
}
func (m *SubmitCaptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitCaptureRequest.Marshal(b, m, deterministic)
}
func (dst *SubmitCaptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitCaptureRequest.Merge(dst, src)
}
func (m *SubmitCaptureRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitCaptureRequest.Size(m)
}
func (m *SubmitCaptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitCaptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitCaptureRequest proto.InternalMessageInfo

func (m *SubmitCaptureRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *SubmitCaptureRequest) GetNotification() string {
	if m != nil {
		return m.Notification
	}
	return ""
}

func (m *SubmitCaptureRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *SubmitCaptureRequest) GetMeta() []*Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SubmitCaptureRequest) GetSkiprecent() int64 {
	if m != nil {
		return m.Skiprecent
	}
	return 0
}

type SubmitCaptureResult struct {
	Assets               string   `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets,omitempty"`
	Skipped              bool     `protobuf:"varint,2,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitCaptureResult) Reset()         { *m = SubmitCaptureResult{} }
func (m *SubmitCaptureResult) String() string { return proto.CompactTextString(m) }
func (*SubmitCaptureResult) ProtoMessage()    {}
func (*SubmitCaptureResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{33}
}
func (m *SubmitCaptureResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitCaptureResult.Unmarshal(m, b)
}
func (m *SubmitCaptureResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitCaptureResult.Marshal(b, m, deterministic)
}
func (dst *SubmitCaptureResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitCaptureResult.Merge(dst, src)
}
func (m *SubmitCaptureResult) XXX_Size() int {
	return xxx_messageInfo_SubmitCaptureResult.Size(m)
}
func (m *SubmitCaptureResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitCaptureResult.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitCaptureResult proto.InternalMessageInfo

func (m *SubmitCaptureResult) GetAssets() string {
	if m != nil {
		return m.Assets
	}
	return ""
}

func (m *SubmitCaptureResult) GetSkipped() bool {
	if m != nil {
		return m.Skipped
	}
	return false
}

func (m *SubmitCaptureResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SatelliteLogSearchRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SatelliteLogSearchRequest) Reset()         { *m = SatelliteLogSearchRequest{} }
func (m *SatelliteLogSearchRequest) String() string { return proto.CompactTextString(m) }
func (*SatelliteLogSearchRequest) ProtoMessage()    {}
func (*SatelliteLogSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{34}
}
func (m *SatelliteLogSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatelliteLogSearchRequest.Unmarshal(m, b)
}
func (m *SatelliteLogSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatelliteLogSearchRequest.Marshal(b, m, deterministic)
}
func (dst *SatelliteLogSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatelliteLogSearchRequest.Merge(dst, src)
}
func (m *SatelliteLogSearchRequest) XXX_Size() int {
	return xxx_messageInfo_SatelliteLogSearchRequest.Size(m)
}
func (m *SatelliteLogSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SatelliteLogSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SatelliteLogSearchRequest proto.InternalMessageInfo

func (m *SatelliteLogSearchRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *SatelliteLogSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SatelliteLogSearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SatelliteLogSearchRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type SatelliteLogSearchResult struct {
	Satellite string `protobuf:"bytes,1,opt,name=satellite,proto3" json:"satellite,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary           *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SatelliteLogSearchResult) Reset()         { *m = SatelliteLogSearchResult{} }
func (m *SatelliteLogSearchResult) String() string { return proto.CompactTextString(m) }
func (*SatelliteLogSearchResult) ProtoMessage()    {}
func (*SatelliteLogSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{35}
}
func (m *SatelliteLogSearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatelliteLogSearchResult.Unmarshal(m, b)
}
func (m *SatelliteLogSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatelliteLogSearchResult.Marshal(b, m, deterministic)
}
func (dst *SatelliteLogSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatelliteLogSearchResult.Merge(dst, src)
}
func (m *SatelliteLogSearchResult) XXX_Size() int {
	return xxx_messageInfo_SatelliteLogSearchResult.Size(m)
}
func (m *SatelliteLogSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SatelliteLogSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_SatelliteLogSearchResult proto.InternalMessageInfo

func (m *SatelliteLogSearchResult) GetSatellite() string {
	if m != nil {
		return m.Satellite
	}
	return ""
}

func (m *SatelliteLogSearchResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

func (m *SatelliteLogSearchResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

type SatellitesForRootRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SatellitesForRootRequest) Reset()         { *m = SatellitesForRootRequest{} }
func (m *SatellitesForRootRequest) String() string { return proto.CompactTextString(m) }
func (*SatellitesForRootRequest) ProtoMessage()    {}
func (*SatellitesForRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{36}
}
func (m *SatellitesForRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatellitesForRootRequest.Unmarshal(m, b)
}
func (m *SatellitesForRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatellitesForRootRequest.Marshal(b, m, deterministic)
}
func (dst *SatellitesForRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatellitesForRootRequest.Merge(dst, src)
}
func (m *SatellitesForRootRequest) XXX_Size() int {
	return xxx_messageInfo_SatellitesForRootRequest.Size(m)
}
func (m *SatellitesForRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SatellitesForRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SatellitesForRootRequest proto.InternalMessageInfo

func (m *SatellitesForRootRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *SatellitesForRootRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SatellitesForRootRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SatellitesForRootRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type SatellitesForRootResult struct {
	Root      string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Satellite string `protobuf:"bytes,2,opt,name=satellite,proto3" json:"satellite,omitempty"`
	// A capture summary for this result.
	Capsummary   *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	Associations []string    `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume               string   `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SatellitesForRootResult) Reset()         { *m = SatellitesForRootResult{} }
func (m *SatellitesForRootResult) String() string { return proto.CompactTextString(m) }
func (*SatellitesForRootResult) ProtoMessage()    {}
func (*SatellitesForRootResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{37}
}
func (m *SatellitesForRootResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatellitesForRootResult.Unmarshal(m, b)
}
func (m *SatellitesForRootResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatellitesForRootResult.Marshal(b, m, deterministic)
}
func (dst *SatellitesForRootResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatellitesForRootResult.Merge(dst, src)
}
func (m *SatellitesForRootResult) XXX_Size() int {
	return xxx_messageInfo_SatellitesForRootResult.Size(m)
}
func (m *SatellitesForRootResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SatellitesForRootResult.DiscardUnknown(m)
}

var xxx_messageInfo_SatellitesForRootResult proto.InternalMessageInfo

func (m *SatellitesForRootResult) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *SatellitesForRootResult) GetSatellite() string {
	if m != nil {
		return m.Satellite
	}
	return ""
}

func (m *SatellitesForRootResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

func (m *SatellitesForRootResult) GetAssociations() []string {
	if m != nil {
		return m.Associations
	}
	return nil
}

func (m *SatellitesForRootResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type URLLogSearchRequest struct {
	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume               string   `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URLLogSearchRequest) Reset()         { *m = URLLogSearchRequest{} }
func (m *URLLogSearchRequest) String() string { return proto.CompactTextString(m) }
func (*URLLogSearchRequest) ProtoMessage()    {}
func (*URLLogSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{38}
}
func (m *URLLogSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URLLogSearchRequest.Unmarshal(m, b)
}
func (m *URLLogSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URLLogSearchRequest.Marshal(b, m, deterministic)
}
func (dst *URLLogSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLLogSearchRequest.Merge(dst, src)
}
func (m *URLLogSearchRequest) XXX_Size() int {
	return xxx_messageInfo_URLLogSearchRequest.Size(m)
}
func (m *URLLogSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_URLLogSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_URLLogSearchRequest proto.InternalMessageInfo

func (m *URLLogSearchRequest) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *URLLogSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *URLLogSearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *URLLogSearchRequest) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

type URLLogSearchResult struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary           *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *URLLogSearchResult) Reset()         { *m = URLLogSearchResult{} }
func (m *URLLogSearchResult) String() string { return proto.CompactTextString(m) }
func (*URLLogSearchResult) ProtoMessage()    {}
func (*URLLogSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dset_0a2ae1df1103694e, []int{39}
}
func (m *URLLogSearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URLLogSearchResult.Unmarshal(m, b)
}
func (m *URLLogSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URLLogSearchResult.Marshal(b, m, deterministic)
}
func (dst *URLLogSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLLogSearchResult.Merge(dst, src)
}
func (m *URLLogSearchResult) XXX_Size() int {
	return xxx_messageInfo_URLLogSearchResult.Size(m)
}
func (m *URLLogSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_URLLogSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_URLLogSearchResult proto.InternalMessageInfo

func (m *URLLogSearchResult) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *URLLogSearchResult) GetResume() string {
	if m != nil {
		return m.Resume
	}
	return ""
}

func (m *URLLogSearchResult) GetCapsummary() *CapSummary {
	if m != nil {
		return m.Capsummary
	}
	return nil
}

func init() {
	proto.RegisterType((*CapSummary)(nil), "io.netograph.dset.CapSummary")
	proto.RegisterType((*CapSummary_Plan)(nil), "io.netograph.dset.CapSummary.Plan")
	proto.RegisterType((*CapSummary_Root)(nil), "io.netograph.dset.CapSummary.Root")
	proto.RegisterType((*CapSummary_Stats)(nil), "io.netograph.dset.CapSummary.Stats")
	proto.RegisterType((*Metadata)(nil), "io.netograph.dset.Metadata")
	proto.RegisterType((*CaptureInfoRequest)(nil), "io.netograph.dset.CaptureInfoRequest")
	proto.RegisterType((*CaptureInfoResult)(nil), "io.netograph.dset.CaptureInfoResult")
	proto.RegisterType((*CaptureLogRequest)(nil), "io.netograph.dset.CaptureLogRequest")
	proto.RegisterType((*CaptureLogResult)(nil), "io.netograph.dset.CaptureLogResult")
	proto.RegisterType((*DomainHistoryRequest)(nil), "io.netograph.dset.DomainHistoryRequest")
	proto.RegisterType((*DomainHistoryResult)(nil), "io.netograph.dset.DomainHistoryResult")
	proto.RegisterType((*DomainSearchRequest)(nil), "io.netograph.dset.DomainSearchRequest")
	proto.RegisterType((*DomainSearchResult)(nil), "io.netograph.dset.DomainSearchResult")
	proto.RegisterType((*DomainsForIPRequest)(nil), "io.netograph.dset.DomainsForIPRequest")
	proto.RegisterType((*DomainsForIPResult)(nil), "io.netograph.dset.DomainsForIPResult")
	proto.RegisterType((*IPHistoryRequest)(nil), "io.netograph.dset.IPHistoryRequest")
	proto.RegisterType((*IPHistoryResult)(nil), "io.netograph.dset.IPHistoryResult")
	proto.RegisterType((*IPLogSearchRequest)(nil), "io.netograph.dset.IPLogSearchRequest")
	proto.RegisterType((*IPLogSearchResult)(nil), "io.netograph.dset.IPLogSearchResult")
	proto.RegisterType((*IPSearchResult)(nil), "io.netograph.dset.IPSearchResult")
	proto.RegisterType((*IPSearchRequest)(nil), "io.netograph.dset.IPSearchRequest")
	proto.RegisterType((*IPsForDomainRequest)(nil), "io.netograph.dset.IPsForDomainRequest")
	proto.RegisterType((*IPsForDomainResult)(nil), "io.netograph.dset.IPsForDomainResult")
	proto.RegisterType((*MetaForCaptureRequest)(nil), "io.netograph.dset.MetaForCaptureRequest")
	proto.RegisterType((*MetaForCaptureResult)(nil), "io.netograph.dset.MetaForCaptureResult")
	proto.RegisterType((*MetaSearchRequest)(nil), "io.netograph.dset.MetaSearchRequest")
	proto.RegisterType((*MetaSearchResult)(nil), "io.netograph.dset.MetaSearchResult")
	proto.RegisterType((*RedirsByDestinationRequest)(nil), "io.netograph.dset.RedirsByDestinationRequest")
	proto.RegisterType((*RedirsByDestinationResult)(nil), "io.netograph.dset.RedirsByDestinationResult")
	proto.RegisterType((*RedirsBySourceRequest)(nil), "io.netograph.dset.RedirsBySourceRequest")
	proto.RegisterType((*RedirsBySourceResult)(nil), "io.netograph.dset.RedirsBySourceResult")
	proto.RegisterType((*RootLogSearchRequest)(nil), "io.netograph.dset.RootLogSearchRequest")
	proto.RegisterType((*RootLogSearchResult)(nil), "io.netograph.dset.RootLogSearchResult")
	proto.RegisterType((*RootsForSatelliteRequest)(nil), "io.netograph.dset.RootsForSatelliteRequest")
	proto.RegisterType((*RootsForSatelliteResult)(nil), "io.netograph.dset.RootsForSatelliteResult")
	proto.RegisterType((*SubmitCaptureRequest)(nil), "io.netograph.dset.SubmitCaptureRequest")
	proto.RegisterType((*SubmitCaptureResult)(nil), "io.netograph.dset.SubmitCaptureResult")
	proto.RegisterType((*SatelliteLogSearchRequest)(nil), "io.netograph.dset.SatelliteLogSearchRequest")
	proto.RegisterType((*SatelliteLogSearchResult)(nil), "io.netograph.dset.SatelliteLogSearchResult")
	proto.RegisterType((*SatellitesForRootRequest)(nil), "io.netograph.dset.SatellitesForRootRequest")
	proto.RegisterType((*SatellitesForRootResult)(nil), "io.netograph.dset.SatellitesForRootResult")
	proto.RegisterType((*URLLogSearchRequest)(nil), "io.netograph.dset.URLLogSearchRequest")
	proto.RegisterType((*URLLogSearchResult)(nil), "io.netograph.dset.URLLogSearchResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DsetClient is the client API for Dset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DsetClient interface {
	// Submit a capture request to a dataset.
	SubmitCapture(ctx context.Context, in *SubmitCaptureRequest, opts ...grpc.CallOption) (*SubmitCaptureResult, error)
	// Retrieve info for a specified capture by ID within a dataset.
	CaptureInfo(ctx context.Context, in *CaptureInfoRequest, opts ...grpc.CallOption) (*CaptureInfoResult, error)
	// Retrieve the capture log for a dataset, in reverse chronological order.
	CaptureLog(ctx context.Context, in *CaptureLogRequest, opts ...grpc.CallOption) (Dset_CaptureLogClient, error)
	// Retrieve the capture history for a specified domain in a dataset. The
	// length of this history is capped at ~100.
	DomainHistory(ctx context.Context, in *DomainHistoryRequest, opts ...grpc.CallOption) (Dset_DomainHistoryClient, error)
	// Retrieve the capture log for a dataset, in reverse chronological order.
	DomainSearch(ctx context.Context, in *DomainSearchRequest, opts ...grpc.CallOption) (Dset_DomainSearchClient, error)
	// Find all domains in the dataset associated with a given IP address.
	DomainsForIP(ctx context.Context, in *DomainsForIPRequest, opts ...grpc.CallOption) (Dset_DomainsForIPClient, error)
	// Retrieve the capture history for a specified IP in a dataset. The
	// length of this history is capped at ~100.
	IPHistory(ctx context.Context, in *IPHistoryRequest, opts ...grpc.CallOption) (Dset_IPHistoryClient, error)
	// Search the dataset log for captures that contain a given IP.
	IPLogSearch(ctx context.Context, in *IPLogSearchRequest, opts ...grpc.CallOption) (Dset_IPLogSearchClient, error)
	// Find all IPs in the dataset that match an address and integer netmask.
	IPSearch(ctx context.Context, in *IPSearchRequest, opts ...grpc.CallOption) (Dset_IPSearchClient, error)
	// Find all IPs in a dataset associated with a given domain.
	IPsForDomain(ctx context.Context, in *IPsForDomainRequest, opts ...grpc.CallOption) (Dset_IPsForDomainClient, error)
	// Get metadata associated with a specified capture within a dataset.
	MetaForCapture(ctx context.Context, in *MetaForCaptureRequest, opts ...grpc.CallOption) (Dset_MetaForCaptureClient, error)
	// Search the dataset log for captures matching a metadata query.
	MetaSearch(ctx context.Context, in *MetaSearchRequest, opts ...grpc.CallOption) (Dset_MetaSearchClient, error)
	// Find all redirections in the dataset for a given destination domain query.
	RedirsByDestination(ctx context.Context, in *RedirsByDestinationRequest, opts ...grpc.CallOption) (Dset_RedirsByDestinationClient, error)
	// Find all redirections in the dataset for a given source domain query.
	RedirsBySource(ctx context.Context, in *RedirsBySourceRequest, opts ...grpc.CallOption) (Dset_RedirsBySourceClient, error)
	// Search the dataset log for captures where any root domain matches a given query.
	RootLogSearch(ctx context.Context, in *RootLogSearchRequest, opts ...grpc.CallOption) (Dset_RootLogSearchClient, error)
	// Find all roots in a dataset that are associated with a given satellite query.
	RootsForSatellite(ctx context.Context, in *RootsForSatelliteRequest, opts ...grpc.CallOption) (Dset_RootsForSatelliteClient, error)
	// Search the dataset log for captures where any satellite domain matches a given query.
	SatelliteLogSearch(ctx context.Context, in *SatelliteLogSearchRequest, opts ...grpc.CallOption) (Dset_SatelliteLogSearchClient, error)
	// Find all satellites in the dataset that are associated with a given root query.
	SatellitesForRoot(ctx context.Context, in *SatellitesForRootRequest, opts ...grpc.CallOption) (Dset_SatellitesForRootClient, error)
	// Search the dataset log for captures where any root URL matches a given URL query.
	URLLogSearch(ctx context.Context, in *URLLogSearchRequest, opts ...grpc.CallOption) (Dset_URLLogSearchClient, error)
}

type dsetClient struct {
	cc *grpc.ClientConn
}

func NewDsetClient(cc *grpc.ClientConn) DsetClient {
	return &dsetClient{cc}
}

func (c *dsetClient) SubmitCapture(ctx context.Context, in *SubmitCaptureRequest, opts ...grpc.CallOption) (*SubmitCaptureResult, error) {
	out := new(SubmitCaptureResult)
	err := c.cc.Invoke(ctx, "/io.netograph.dset.Dset/SubmitCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dsetClient) CaptureInfo(ctx context.Context, in *CaptureInfoRequest, opts ...grpc.CallOption) (*CaptureInfoResult, error) {
	out := new(CaptureInfoResult)
	err := c.cc.Invoke(ctx, "/io.netograph.dset.Dset/CaptureInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dsetClient) CaptureLog(ctx context.Context, in *CaptureLogRequest, opts ...grpc.CallOption) (Dset_CaptureLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[0], "/io.netograph.dset.Dset/CaptureLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetCaptureLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_CaptureLogClient interface {
	Recv() (*CaptureLogResult, error)
	grpc.ClientStream
}

type dsetCaptureLogClient struct {
	grpc.ClientStream
}

func (x *dsetCaptureLogClient) Recv() (*CaptureLogResult, error) {
	m := new(CaptureLogResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainHistory(ctx context.Context, in *DomainHistoryRequest, opts ...grpc.CallOption) (Dset_DomainHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[1], "/io.netograph.dset.Dset/DomainHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainHistoryClient interface {
	Recv() (*DomainHistoryResult, error)
	grpc.ClientStream
}

type dsetDomainHistoryClient struct {
	grpc.ClientStream
}

func (x *dsetDomainHistoryClient) Recv() (*DomainHistoryResult, error) {
	m := new(DomainHistoryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainSearch(ctx context.Context, in *DomainSearchRequest, opts ...grpc.CallOption) (Dset_DomainSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[2], "/io.netograph.dset.Dset/DomainSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainSearchClient interface {
	Recv() (*DomainSearchResult, error)
	grpc.ClientStream
}

type dsetDomainSearchClient struct {
	grpc.ClientStream
}

func (x *dsetDomainSearchClient) Recv() (*DomainSearchResult, error) {
	m := new(DomainSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainsForIP(ctx context.Context, in *DomainsForIPRequest, opts ...grpc.CallOption) (Dset_DomainsForIPClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[3], "/io.netograph.dset.Dset/DomainsForIP", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainsForIPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainsForIPClient interface {
	Recv() (*DomainsForIPResult, error)
	grpc.ClientStream
}

type dsetDomainsForIPClient struct {
	grpc.ClientStream
}

func (x *dsetDomainsForIPClient) Recv() (*DomainsForIPResult, error) {
	m := new(DomainsForIPResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) IPHistory(ctx context.Context, in *IPHistoryRequest, opts ...grpc.CallOption) (Dset_IPHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[4], "/io.netograph.dset.Dset/IPHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetIPHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_IPHistoryClient interface {
	Recv() (*IPHistoryResult, error)
	grpc.ClientStream
}

type dsetIPHistoryClient struct {
	grpc.ClientStream
}

func (x *dsetIPHistoryClient) Recv() (*IPHistoryResult, error) {
	m := new(IPHistoryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) IPLogSearch(ctx context.Context, in *IPLogSearchRequest, opts ...grpc.CallOption) (Dset_IPLogSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[5], "/io.netograph.dset.Dset/IPLogSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetIPLogSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_IPLogSearchClient interface {
	Recv() (*IPLogSearchResult, error)
	grpc.ClientStream
}

type dsetIPLogSearchClient struct {
	grpc.ClientStream
}

func (x *dsetIPLogSearchClient) Recv() (*IPLogSearchResult, error) {
	m := new(IPLogSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) IPSearch(ctx context.Context, in *IPSearchRequest, opts ...grpc.CallOption) (Dset_IPSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[6], "/io.netograph.dset.Dset/IPSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetIPSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_IPSearchClient interface {
	Recv() (*IPSearchResult, error)
	grpc.ClientStream
}

type dsetIPSearchClient struct {
	grpc.ClientStream
}

func (x *dsetIPSearchClient) Recv() (*IPSearchResult, error) {
	m := new(IPSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) IPsForDomain(ctx context.Context, in *IPsForDomainRequest, opts ...grpc.CallOption) (Dset_IPsForDomainClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[7], "/io.netograph.dset.Dset/IPsForDomain", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetIPsForDomainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_IPsForDomainClient interface {
	Recv() (*IPsForDomainResult, error)
	grpc.ClientStream
}

type dsetIPsForDomainClient struct {
	grpc.ClientStream
}

func (x *dsetIPsForDomainClient) Recv() (*IPsForDomainResult, error) {
	m := new(IPsForDomainResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) MetaForCapture(ctx context.Context, in *MetaForCaptureRequest, opts ...grpc.CallOption) (Dset_MetaForCaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[8], "/io.netograph.dset.Dset/MetaForCapture", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetMetaForCaptureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_MetaForCaptureClient interface {
	Recv() (*MetaForCaptureResult, error)
	grpc.ClientStream
}

type dsetMetaForCaptureClient struct {
	grpc.ClientStream
}

func (x *dsetMetaForCaptureClient) Recv() (*MetaForCaptureResult, error) {
	m := new(MetaForCaptureResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) MetaSearch(ctx context.Context, in *MetaSearchRequest, opts ...grpc.CallOption) (Dset_MetaSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[9], "/io.netograph.dset.Dset/MetaSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetMetaSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_MetaSearchClient interface {
	Recv() (*MetaSearchResult, error)
	grpc.ClientStream
}

type dsetMetaSearchClient struct {
	grpc.ClientStream
}

func (x *dsetMetaSearchClient) Recv() (*MetaSearchResult, error) {
	m := new(MetaSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) RedirsByDestination(ctx context.Context, in *RedirsByDestinationRequest, opts ...grpc.CallOption) (Dset_RedirsByDestinationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[10], "/io.netograph.dset.Dset/RedirsByDestination", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetRedirsByDestinationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_RedirsByDestinationClient interface {
	Recv() (*RedirsByDestinationResult, error)
	grpc.ClientStream
}

type dsetRedirsByDestinationClient struct {
	grpc.ClientStream
}

func (x *dsetRedirsByDestinationClient) Recv() (*RedirsByDestinationResult, error) {
	m := new(RedirsByDestinationResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) RedirsBySource(ctx context.Context, in *RedirsBySourceRequest, opts ...grpc.CallOption) (Dset_RedirsBySourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[11], "/io.netograph.dset.Dset/RedirsBySource", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetRedirsBySourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_RedirsBySourceClient interface {
	Recv() (*RedirsBySourceResult, error)
	grpc.ClientStream
}

type dsetRedirsBySourceClient struct {
	grpc.ClientStream
}

func (x *dsetRedirsBySourceClient) Recv() (*RedirsBySourceResult, error) {
	m := new(RedirsBySourceResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) RootLogSearch(ctx context.Context, in *RootLogSearchRequest, opts ...grpc.CallOption) (Dset_RootLogSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[12], "/io.netograph.dset.Dset/RootLogSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetRootLogSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_RootLogSearchClient interface {
	Recv() (*RootLogSearchResult, error)
	grpc.ClientStream
}

type dsetRootLogSearchClient struct {
	grpc.ClientStream
}

func (x *dsetRootLogSearchClient) Recv() (*RootLogSearchResult, error) {
	m := new(RootLogSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) RootsForSatellite(ctx context.Context, in *RootsForSatelliteRequest, opts ...grpc.CallOption) (Dset_RootsForSatelliteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[13], "/io.netograph.dset.Dset/RootsForSatellite", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetRootsForSatelliteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_RootsForSatelliteClient interface {
	Recv() (*RootsForSatelliteResult, error)
	grpc.ClientStream
}

type dsetRootsForSatelliteClient struct {
	grpc.ClientStream
}

func (x *dsetRootsForSatelliteClient) Recv() (*RootsForSatelliteResult, error) {
	m := new(RootsForSatelliteResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) SatelliteLogSearch(ctx context.Context, in *SatelliteLogSearchRequest, opts ...grpc.CallOption) (Dset_SatelliteLogSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[14], "/io.netograph.dset.Dset/SatelliteLogSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetSatelliteLogSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_SatelliteLogSearchClient interface {
	Recv() (*SatelliteLogSearchResult, error)
	grpc.ClientStream
}

type dsetSatelliteLogSearchClient struct {
	grpc.ClientStream
}

func (x *dsetSatelliteLogSearchClient) Recv() (*SatelliteLogSearchResult, error) {
	m := new(SatelliteLogSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) SatellitesForRoot(ctx context.Context, in *SatellitesForRootRequest, opts ...grpc.CallOption) (Dset_SatellitesForRootClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[15], "/io.netograph.dset.Dset/SatellitesForRoot", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetSatellitesForRootClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_SatellitesForRootClient interface {
	Recv() (*SatellitesForRootResult, error)
	grpc.ClientStream
}

type dsetSatellitesForRootClient struct {
	grpc.ClientStream
}

func (x *dsetSatellitesForRootClient) Recv() (*SatellitesForRootResult, error) {
	m := new(SatellitesForRootResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) URLLogSearch(ctx context.Context, in *URLLogSearchRequest, opts ...grpc.CallOption) (Dset_URLLogSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[16], "/io.netograph.dset.Dset/URLLogSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetURLLogSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_URLLogSearchClient interface {
	Recv() (*URLLogSearchResult, error)
	grpc.ClientStream
}

type dsetURLLogSearchClient struct {
	grpc.ClientStream
}

func (x *dsetURLLogSearchClient) Recv() (*URLLogSearchResult, error) {
	m := new(URLLogSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DsetServer is the server API for Dset service.
type DsetServer interface {
	// Submit a capture request to a dataset.
	SubmitCapture(context.Context, *SubmitCaptureRequest) (*SubmitCaptureResult, error)
	// Retrieve info for a specified capture by ID within a dataset.
	CaptureInfo(context.Context, *CaptureInfoRequest) (*CaptureInfoResult, error)
	// Retrieve the capture log for a dataset, in reverse chronological order.
	CaptureLog(*CaptureLogRequest, Dset_CaptureLogServer) error
	// Retrieve the capture history for a specified domain in a dataset. The
	// length of this history is capped at ~100.
	DomainHistory(*DomainHistoryRequest, Dset_DomainHistoryServer) error
	// Retrieve the capture log for a dataset, in reverse chronological order.
	DomainSearch(*DomainSearchRequest, Dset_DomainSearchServer) error
	// Find all domains in the dataset associated with a given IP address.
	DomainsForIP(*DomainsForIPRequest, Dset_DomainsForIPServer) error
	// Retrieve the capture history for a specified IP in a dataset. The
	// length of this history is capped at ~100.
	IPHistory(*IPHistoryRequest, Dset_IPHistoryServer) error
	// Search the dataset log for captures that contain a given IP.
	IPLogSearch(*IPLogSearchRequest, Dset_IPLogSearchServer) error
	// Find all IPs in the dataset that match an address and integer netmask.
	IPSearch(*IPSearchRequest, Dset_IPSearchServer) error
	// Find all IPs in a dataset associated with a given domain.
	IPsForDomain(*IPsForDomainRequest, Dset_IPsForDomainServer) error
	// Get metadata associated with a specified capture within a dataset.
	MetaForCapture(*MetaForCaptureRequest, Dset_MetaForCaptureServer) error
	// Search the dataset log for captures matching a metadata query.
	MetaSearch(*MetaSearchRequest, Dset_MetaSearchServer) error
	// Find all redirections in the dataset for a given destination domain query.
	RedirsByDestination(*RedirsByDestinationRequest, Dset_RedirsByDestinationServer) error
	// Find all redirections in the dataset for a given source domain query.
	RedirsBySource(*RedirsBySourceRequest, Dset_RedirsBySourceServer) error
	// Search the dataset log for captures where any root domain matches a given query.
	RootLogSearch(*RootLogSearchRequest, Dset_RootLogSearchServer) error
	// Find all roots in a dataset that are associated with a given satellite query.
	RootsForSatellite(*RootsForSatelliteRequest, Dset_RootsForSatelliteServer) error
	// Search the dataset log for captures where any satellite domain matches a given query.
	SatelliteLogSearch(*SatelliteLogSearchRequest, Dset_SatelliteLogSearchServer) error
	// Find all satellites in the dataset that are associated with a given root query.
	SatellitesForRoot(*SatellitesForRootRequest, Dset_SatellitesForRootServer) error
	// Search the dataset log for captures where any root URL matches a given URL query.
	URLLogSearch(*URLLogSearchRequest, Dset_URLLogSearchServer) error
}

func RegisterDsetServer(s *grpc.Server, srv DsetServer) {
	s.RegisterService(&_Dset_serviceDesc, srv)
}

func _Dset_SubmitCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsetServer).SubmitCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.netograph.dset.Dset/SubmitCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsetServer).SubmitCapture(ctx, req.(*SubmitCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dset_CaptureInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsetServer).CaptureInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.netograph.dset.Dset/CaptureInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsetServer).CaptureInfo(ctx, req.(*CaptureInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dset_CaptureLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).CaptureLog(m, &dsetCaptureLogServer{stream})
}

type Dset_CaptureLogServer interface {
	Send(*CaptureLogResult) error
	grpc.ServerStream
}

type dsetCaptureLogServer struct {
	grpc.ServerStream
}

func (x *dsetCaptureLogServer) Send(m *CaptureLogResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainHistory(m, &dsetDomainHistoryServer{stream})
}

type Dset_DomainHistoryServer interface {
	Send(*DomainHistoryResult) error
	grpc.ServerStream
}

type dsetDomainHistoryServer struct {
	grpc.ServerStream
}

func (x *dsetDomainHistoryServer) Send(m *DomainHistoryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainSearch(m, &dsetDomainSearchServer{stream})
}

type Dset_DomainSearchServer interface {
	Send(*DomainSearchResult) error
	grpc.ServerStream
}

type dsetDomainSearchServer struct {
	grpc.ServerStream
}

func (x *dsetDomainSearchServer) Send(m *DomainSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainsForIP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainsForIPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainsForIP(m, &dsetDomainsForIPServer{stream})
}

type Dset_DomainsForIPServer interface {
	Send(*DomainsForIPResult) error
	grpc.ServerStream
}

type dsetDomainsForIPServer struct {
	grpc.ServerStream
}

func (x *dsetDomainsForIPServer) Send(m *DomainsForIPResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_IPHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).IPHistory(m, &dsetIPHistoryServer{stream})
}

type Dset_IPHistoryServer interface {
	Send(*IPHistoryResult) error
	grpc.ServerStream
}

type dsetIPHistoryServer struct {
	grpc.ServerStream
}

func (x *dsetIPHistoryServer) Send(m *IPHistoryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_IPLogSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPLogSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).IPLogSearch(m, &dsetIPLogSearchServer{stream})
}

type Dset_IPLogSearchServer interface {
	Send(*IPLogSearchResult) error
	grpc.ServerStream
}

type dsetIPLogSearchServer struct {
	grpc.ServerStream
}

func (x *dsetIPLogSearchServer) Send(m *IPLogSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_IPSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).IPSearch(m, &dsetIPSearchServer{stream})
}

type Dset_IPSearchServer interface {
	Send(*IPSearchResult) error
	grpc.ServerStream
}

type dsetIPSearchServer struct {
	grpc.ServerStream
}

func (x *dsetIPSearchServer) Send(m *IPSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_IPsForDomain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPsForDomainRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).IPsForDomain(m, &dsetIPsForDomainServer{stream})
}

type Dset_IPsForDomainServer interface {
	Send(*IPsForDomainResult) error
	grpc.ServerStream
}

type dsetIPsForDomainServer struct {
	grpc.ServerStream
}

func (x *dsetIPsForDomainServer) Send(m *IPsForDomainResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_MetaForCapture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetaForCaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).MetaForCapture(m, &dsetMetaForCaptureServer{stream})
}

type Dset_MetaForCaptureServer interface {
	Send(*MetaForCaptureResult) error
	grpc.ServerStream
}

type dsetMetaForCaptureServer struct {
	grpc.ServerStream
}

func (x *dsetMetaForCaptureServer) Send(m *MetaForCaptureResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_MetaSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetaSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).MetaSearch(m, &dsetMetaSearchServer{stream})
}

type Dset_MetaSearchServer interface {
	Send(*MetaSearchResult) error
	grpc.ServerStream
}

type dsetMetaSearchServer struct {
	grpc.ServerStream
}

func (x *dsetMetaSearchServer) Send(m *MetaSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_RedirsByDestination_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RedirsByDestinationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).RedirsByDestination(m, &dsetRedirsByDestinationServer{stream})
}

type Dset_RedirsByDestinationServer interface {
	Send(*RedirsByDestinationResult) error
	grpc.ServerStream
}

type dsetRedirsByDestinationServer struct {
	grpc.ServerStream
}

func (x *dsetRedirsByDestinationServer) Send(m *RedirsByDestinationResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_RedirsBySource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RedirsBySourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).RedirsBySource(m, &dsetRedirsBySourceServer{stream})
}

type Dset_RedirsBySourceServer interface {
	Send(*RedirsBySourceResult) error
	grpc.ServerStream
}

type dsetRedirsBySourceServer struct {
	grpc.ServerStream
}

func (x *dsetRedirsBySourceServer) Send(m *RedirsBySourceResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_RootLogSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RootLogSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).RootLogSearch(m, &dsetRootLogSearchServer{stream})
}

type Dset_RootLogSearchServer interface {
	Send(*RootLogSearchResult) error
	grpc.ServerStream
}

type dsetRootLogSearchServer struct {
	grpc.ServerStream
}

func (x *dsetRootLogSearchServer) Send(m *RootLogSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_RootsForSatellite_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RootsForSatelliteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).RootsForSatellite(m, &dsetRootsForSatelliteServer{stream})
}

type Dset_RootsForSatelliteServer interface {
	Send(*RootsForSatelliteResult) error
	grpc.ServerStream
}

type dsetRootsForSatelliteServer struct {
	grpc.ServerStream
}

func (x *dsetRootsForSatelliteServer) Send(m *RootsForSatelliteResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_SatelliteLogSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SatelliteLogSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).SatelliteLogSearch(m, &dsetSatelliteLogSearchServer{stream})
}

type Dset_SatelliteLogSearchServer interface {
	Send(*SatelliteLogSearchResult) error
	grpc.ServerStream
}

type dsetSatelliteLogSearchServer struct {
	grpc.ServerStream
}

func (x *dsetSatelliteLogSearchServer) Send(m *SatelliteLogSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_SatellitesForRoot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SatellitesForRootRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).SatellitesForRoot(m, &dsetSatellitesForRootServer{stream})
}

type Dset_SatellitesForRootServer interface {
	Send(*SatellitesForRootResult) error
	grpc.ServerStream
}

type dsetSatellitesForRootServer struct {
	grpc.ServerStream
}

func (x *dsetSatellitesForRootServer) Send(m *SatellitesForRootResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_URLLogSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(URLLogSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).URLLogSearch(m, &dsetURLLogSearchServer{stream})
}

type Dset_URLLogSearchServer interface {
	Send(*URLLogSearchResult) error
	grpc.ServerStream
}

type dsetURLLogSearchServer struct {
	grpc.ServerStream
}

func (x *dsetURLLogSearchServer) Send(m *URLLogSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Dset_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.netograph.dset.Dset",
	HandlerType: (*DsetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitCapture",
			Handler:    _Dset_SubmitCapture_Handler,
		},
		{
			MethodName: "CaptureInfo",
			Handler:    _Dset_CaptureInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CaptureLog",
			Handler:       _Dset_CaptureLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainHistory",
			Handler:       _Dset_DomainHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainSearch",
			Handler:       _Dset_DomainSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainsForIP",
			Handler:       _Dset_DomainsForIP_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IPHistory",
			Handler:       _Dset_IPHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IPLogSearch",
			Handler:       _Dset_IPLogSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IPSearch",
			Handler:       _Dset_IPSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IPsForDomain",
			Handler:       _Dset_IPsForDomain_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetaForCapture",
			Handler:       _Dset_MetaForCapture_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetaSearch",
			Handler:       _Dset_MetaSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RedirsByDestination",
			Handler:       _Dset_RedirsByDestination_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RedirsBySource",
			Handler:       _Dset_RedirsBySource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RootLogSearch",
			Handler:       _Dset_RootLogSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RootsForSatellite",
			Handler:       _Dset_RootsForSatellite_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SatelliteLogSearch",
			Handler:       _Dset_SatelliteLogSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SatellitesForRoot",
			Handler:       _Dset_SatellitesForRoot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "URLLogSearch",
			Handler:       _Dset_URLLogSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ngapi/dsetapi/dset.proto",
}

func init() {
	proto.RegisterFile("proto/ngapi/dsetapi/dset.proto", fileDescriptor_dset_0a2ae1df1103694e)
}

var fileDescriptor_dset_0a2ae1df1103694e = []byte{
	// 1438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0xd7, 0xc4, 0xde, 0xb4, 0x79, 0x69, 0xf3, 0x4d, 0x26, 0xdb, 0x7e, 0x5d, 0x03, 0x25, 0xb8,
	0x94, 0x46, 0xb4, 0x6c, 0x56, 0x41, 0x42, 0x70, 0x80, 0x43, 0x5b, 0x55, 0x44, 0x2a, 0xd2, 0xca,
	0x5b, 0x40, 0xad, 0x10, 0xe0, 0xec, 0x4e, 0x52, 0x2b, 0x5e, 0x8f, 0xe3, 0x19, 0x53, 0x52, 0xa9,
	0x12, 0x57, 0x4e, 0xbd, 0x73, 0xe0, 0x3f, 0xe0, 0xc2, 0x0d, 0x21, 0xae, 0xfc, 0x2d, 0xfc, 0x19,
	0x68, 0xc6, 0xf6, 0xda, 0xe3, 0x1d, 0xef, 0x7a, 0xdb, 0xed, 0x8a, 0x9e, 0xb2, 0x33, 0x7e, 0x3f,
	0x3f, 0xf3, 0xde, 0xcc, 0x7b, 0x2f, 0x70, 0x35, 0x8a, 0x29, 0xa7, 0x7b, 0xe1, 0xb1, 0x17, 0xf9,
	0x7b, 0x43, 0x46, 0x78, 0xfe, 0xb7, 0x23, 0x3f, 0xe0, 0x2d, 0x9f, 0x76, 0x42, 0xc2, 0xe9, 0x71,
	0xec, 0x45, 0x8f, 0x3b, 0xe2, 0x83, 0xfd, 0xf6, 0x31, 0xa5, 0xc7, 0x01, 0xd9, 0x93, 0x04, 0x87,
	0xc9, 0xd1, 0x1e, 0xf7, 0x47, 0x84, 0x71, 0x6f, 0x14, 0xa5, 0x3c, 0xce, 0xaf, 0x06, 0xc0, 0x1d,
	0x2f, 0xea, 0x27, 0xa3, 0x91, 0x17, 0x9f, 0xe1, 0x0d, 0x58, 0xf1, 0x87, 0x16, 0xda, 0x41, 0xbb,
	0x6b, 0xee, 0x8a, 0x3f, 0xc4, 0x97, 0x61, 0xd5, 0x63, 0x8c, 0x70, 0x66, 0xad, 0xc8, 0xbd, 0x6c,
	0x85, 0x3f, 0x86, 0x56, 0x4c, 0x29, 0x67, 0x96, 0xb1, 0x63, 0xec, 0xae, 0xef, 0x3b, 0x9d, 0x09,
	0xd5, 0x9d, 0x42, 0x6a, 0xc7, 0xa5, 0x94, 0xbb, 0x29, 0x03, 0xee, 0x80, 0x29, 0x6c, 0xb0, 0xcc,
	0x1d, 0xb4, 0xbb, 0xbe, 0x6f, 0x77, 0x52, 0x03, 0x3b, 0xb9, 0x81, 0x9d, 0x07, 0xb9, 0x81, 0xae,
	0xa4, 0xc3, 0x1f, 0x81, 0x19, 0x05, 0x5e, 0x68, 0xb5, 0x24, 0xfd, 0x0c, 0x45, 0xbd, 0xc0, 0x0b,
	0x5d, 0x49, 0x8f, 0x3f, 0x81, 0x16, 0xe3, 0x1e, 0x67, 0xd6, 0xaa, 0x64, 0xbc, 0x36, 0x9d, 0xb1,
	0x2f, 0x48, 0xdd, 0x94, 0xc3, 0xb6, 0xc1, 0x14, 0x82, 0x30, 0x06, 0x33, 0x89, 0x03, 0x66, 0xa1,
	0x1d, 0x63, 0x77, 0xcd, 0x95, 0xbf, 0xc5, 0x37, 0xe1, 0x8d, 0xf6, 0x5b, 0x1f, 0x5a, 0x52, 0x0e,
	0x6e, 0x43, 0xeb, 0x28, 0xa0, 0x4f, 0x98, 0x04, 0xb2, 0xe5, 0xa6, 0x0b, 0x7c, 0x15, 0xe0, 0x09,
	0x39, 0x64, 0x74, 0x70, 0x92, 0xe3, 0xd9, 0x72, 0x4b, 0x3b, 0x82, 0xeb, 0x31, 0x65, 0x12, 0x53,
	0xc9, 0x25, 0x17, 0xce, 0x3e, 0x9c, 0xff, 0x82, 0x70, 0x6f, 0xe8, 0x71, 0x0f, 0x6f, 0x82, 0x71,
	0x42, 0xce, 0xb2, 0xe3, 0x11, 0x3f, 0x05, 0xcf, 0x0f, 0x5e, 0x90, 0x90, 0xec, 0x78, 0xd2, 0x85,
	0xf3, 0x19, 0xe0, 0x3b, 0x5e, 0xc4, 0x93, 0x98, 0x1c, 0x84, 0x47, 0xd4, 0x25, 0xa7, 0x09, 0x61,
	0x1c, 0x5b, 0x70, 0x4e, 0x48, 0x61, 0x84, 0x67, 0x12, 0xf2, 0x65, 0x76, 0xea, 0x2b, 0xf9, 0xa9,
	0x3b, 0x2e, 0x6c, 0x29, 0xfc, 0x2c, 0x09, 0x38, 0xfe, 0x14, 0x60, 0xe0, 0x45, 0x2c, 0x05, 0x4c,
	0x4a, 0x58, 0xdf, 0x7f, 0x6b, 0x2a, 0xaa, 0x6e, 0x89, 0xc1, 0xf9, 0x13, 0x8d, 0x85, 0xde, 0xa7,
	0xc7, 0xb3, 0x6d, 0x6a, 0x43, 0x2b, 0xf0, 0x47, 0x3e, 0x97, 0x66, 0x19, 0x6e, 0xba, 0x10, 0xf1,
	0x18, 0x13, 0x96, 0x8c, 0x88, 0x04, 0x69, 0xcd, 0xcd, 0x56, 0xb8, 0x2b, 0x4f, 0x3b, 0xe6, 0x0d,
	0xc2, 0x2a, 0x25, 0xc4, 0xb7, 0xc0, 0x20, 0xe1, 0x30, 0x0b, 0xab, 0x69, 0xf4, 0x82, 0xcc, 0xf1,
	0x61, 0xb3, 0x6c, 0xfc, 0x02, 0x00, 0x29, 0xb9, 0xb2, 0x52, 0x76, 0xc5, 0xf9, 0x16, 0xda, 0x77,
	0xe9, 0xc8, 0xf3, 0xc3, 0xcf, 0x7d, 0xc6, 0x69, 0x7c, 0x36, 0x1b, 0xaa, 0xcb, 0xb0, 0x3a, 0x94,
	0x1c, 0xb9, 0xa4, 0x74, 0x55, 0x40, 0x68, 0x94, 0x20, 0x74, 0x1e, 0xc0, 0x76, 0x45, 0xfe, 0x22,
	0x8e, 0x97, 0xe5, 0x52, 0xfb, 0xc4, 0x8b, 0x07, 0x8f, 0x1b, 0x9d, 0xef, 0x69, 0x42, 0xe2, 0xb3,
	0x3c, 0x72, 0xe5, 0x42, 0x6f, 0x72, 0x09, 0x2a, 0x53, 0x81, 0xea, 0x67, 0x04, 0x58, 0xd5, 0x2a,
	0x5d, 0x29, 0xf0, 0x40, 0x0a, 0x1e, 0x35, 0x88, 0xe3, 0x3b, 0x70, 0x31, 0xf0, 0x38, 0x61, 0x7c,
	0x90, 0x1e, 0xb1, 0x54, 0x3e, 0xd3, 0x7b, 0x95, 0xc7, 0x19, 0xe5, 0x00, 0xb0, 0x7b, 0x34, 0x3e,
	0xe8, 0x35, 0x4b, 0xba, 0x68, 0x9c, 0x74, 0xd1, 0x9c, 0xae, 0xff, 0x35, 0x76, 0x3d, 0xd7, 0x37,
	0xd5, 0xf5, 0xaa, 0xb2, 0x45, 0xb8, 0x8c, 0x1d, 0xb8, 0xe0, 0x31, 0x46, 0x07, 0xbe, 0xc7, 0x7d,
	0x1a, 0x32, 0xcb, 0x94, 0x77, 0xa1, 0xb2, 0x57, 0xb2, 0xbf, 0xa5, 0xd8, 0xef, 0xc2, 0xe6, 0x41,
	0xaf, 0x71, 0x84, 0x37, 0xc2, 0xca, 0xe9, 0xc1, 0xff, 0x4a, 0x32, 0x17, 0x11, 0xd5, 0x01, 0xe0,
	0x83, 0xde, 0x7d, 0x7a, 0xdc, 0x34, 0xa8, 0x5f, 0xee, 0x4c, 0x9f, 0xc2, 0x96, 0xa2, 0x6d, 0x11,
	0xb7, 0x4c, 0xd5, 0xa2, 0x9a, 0x0b, 0xd4, 0x79, 0x06, 0x1b, 0x07, 0x3d, 0x45, 0x71, 0xca, 0x89,
	0x34, 0x9c, 0xaf, 0x20, 0x7b, 0x9e, 0x89, 0xa3, 0x7b, 0x51, 0x94, 0x31, 0x98, 0x23, 0x8f, 0x9d,
	0x64, 0xef, 0xa6, 0xfc, 0x5d, 0x20, 0x6f, 0xea, 0x91, 0x57, 0xa3, 0x91, 0xc1, 0xf6, 0x41, 0x4f,
	0x24, 0x52, 0x9a, 0x52, 0xcb, 0xb9, 0xbd, 0x44, 0x0a, 0xab, 0x5a, 0x5f, 0xaf, 0x14, 0xa6, 0x70,
	0x49, 0x54, 0x26, 0xf7, 0x68, 0x9c, 0x3d, 0x8d, 0x73, 0x17, 0x1a, 0x73, 0x02, 0xf6, 0x1c, 0x41,
	0xbb, 0xaa, 0x51, 0x42, 0xb6, 0x07, 0xe6, 0x88, 0x70, 0x2f, 0xcb, 0x8e, 0x37, 0x34, 0x08, 0xe4,
	0x25, 0x94, 0x2b, 0x09, 0xc7, 0x45, 0xe8, 0x4a, 0xc3, 0x22, 0xb4, 0x2e, 0x6b, 0x4e, 0x61, 0x4b,
	0x48, 0x5e, 0xe6, 0x9b, 0xf7, 0x0b, 0x82, 0xcd, 0xb2, 0xce, 0x17, 0x03, 0xa0, 0xae, 0x8e, 0x52,
	0x6f, 0x1b, 0x73, 0xde, 0xfb, 0xf2, 0x29, 0xd8, 0x2e, 0x19, 0xfa, 0x31, 0xbb, 0x7d, 0x76, 0x97,
	0x30, 0xee, 0x87, 0x32, 0x84, 0x96, 0x03, 0xcc, 0xef, 0x08, 0xae, 0x68, 0x95, 0xe7, 0x59, 0xc5,
	0x68, 0x12, 0x0f, 0x48, 0x9e, 0x55, 0xe9, 0x0a, 0xef, 0xc0, 0xfa, 0xb0, 0x20, 0xce, 0xf4, 0x97,
	0xb7, 0x16, 0x93, 0x67, 0x75, 0x46, 0x27, 0x70, 0x29, 0xb7, 0xb9, 0x2f, 0x0d, 0x5a, 0x0e, 0x56,
	0xbf, 0x21, 0x68, 0x57, 0xf5, 0xfe, 0x97, 0x61, 0xe2, 0xd0, 0x16, 0x5d, 0xd7, 0x1c, 0x2f, 0xf1,
	0x22, 0x50, 0xfa, 0x09, 0xc1, 0x76, 0x45, 0xad, 0x04, 0x09, 0x83, 0x29, 0x7a, 0xd9, 0x4c, 0xa5,
	0xfc, 0x5d, 0xfb, 0x3a, 0xaa, 0x09, 0x65, 0xcc, 0x9b, 0x50, 0x3f, 0x82, 0x25, 0x2c, 0x10, 0x8f,
	0x44, 0xdf, 0xe3, 0x24, 0x08, 0x7c, 0xbe, 0xa4, 0x10, 0xf9, 0x1b, 0xc1, 0xff, 0x35, 0xaa, 0x6b,
	0x01, 0x78, 0x13, 0xd6, 0x58, 0x4e, 0x96, 0xe9, 0x2d, 0x36, 0x5e, 0x12, 0x86, 0x97, 0x7a, 0xa6,
	0xfe, 0x40, 0xd0, 0xee, 0x27, 0x87, 0x23, 0x9f, 0x37, 0x7e, 0xa6, 0x1c, 0xb8, 0x10, 0x52, 0xee,
	0x1f, 0xf9, 0x83, 0x72, 0xb8, 0x2b, 0x7b, 0xe3, 0x01, 0x80, 0x51, 0x0c, 0x00, 0xc6, 0xd7, 0xb0,
	0x29, 0x87, 0x22, 0x0d, 0xae, 0xe1, 0xab, 0x00, 0xec, 0xc4, 0x8f, 0x62, 0x32, 0x20, 0x21, 0x97,
	0x76, 0x1b, 0x6e, 0x69, 0xc7, 0xf9, 0x1a, 0xb6, 0x2b, 0xa6, 0xe7, 0x59, 0x9a, 0x4d, 0x65, 0x90,
	0x32, 0x95, 0xb1, 0xe0, 0x9c, 0x60, 0x8e, 0x48, 0xfa, 0xc6, 0x9e, 0x77, 0xf3, 0x65, 0xf6, 0xf0,
	0x1a, 0xe3, 0x0e, 0xff, 0x0c, 0xae, 0x8c, 0x0f, 0x75, 0xc9, 0x59, 0xf5, 0x1c, 0x81, 0xa5, 0xd3,
	0x2d, 0x3d, 0x53, 0xa2, 0x08, 0x55, 0xa3, 0xe8, 0xd5, 0x25, 0xd9, 0xd8, 0x20, 0x11, 0xee, 0x72,
	0x5c, 0xb5, 0xb4, 0x24, 0xd3, 0xa8, 0x7e, 0xfd, 0x92, 0x8c, 0xc1, 0xf6, 0x97, 0xee, 0xfd, 0x25,
	0x47, 0xd2, 0x33, 0xc0, 0xaa, 0x52, 0x89, 0xdb, 0x26, 0x18, 0x49, 0x1c, 0xe4, 0x43, 0xb2, 0x24,
	0x0e, 0x5e, 0x51, 0xd8, 0xec, 0xff, 0xb3, 0x01, 0xe6, 0x5d, 0xe1, 0xcb, 0xf7, 0x70, 0x51, 0xc9,
	0x52, 0x7c, 0x43, 0x23, 0x44, 0x77, 0x05, 0xd9, 0xef, 0xcd, 0x26, 0x94, 0x3e, 0x3d, 0x82, 0xf5,
	0xd2, 0x40, 0x0e, 0x5f, 0xd7, 0x1b, 0x59, 0x19, 0xf8, 0xd9, 0xef, 0xce, 0x22, 0x93, 0xb2, 0x1f,
	0xca, 0x01, 0x70, 0x36, 0xda, 0xc2, 0x53, 0x78, 0x8a, 0xb1, 0x9d, 0x7d, 0x6d, 0x06, 0x95, 0x10,
	0xdc, 0x45, 0xf8, 0x10, 0x2e, 0x2a, 0xa3, 0x26, 0x2d, 0x30, 0xba, 0x61, 0x97, 0x16, 0x18, 0xcd,
	0xd4, 0xaa, 0x8b, 0xf0, 0x77, 0x70, 0xa1, 0x3c, 0x02, 0xc2, 0xf5, 0x9c, 0x4a, 0x68, 0xda, 0xd7,
	0x67, 0xd2, 0x55, 0x15, 0xa4, 0x83, 0x96, 0x29, 0x0a, 0x94, 0xc9, 0xcf, 0x14, 0x05, 0xe5, 0x89,
	0x4d, 0x17, 0xe1, 0xaf, 0x60, 0x6d, 0x3c, 0xb6, 0xc0, 0x3a, 0x64, 0xab, 0x83, 0x12, 0xdb, 0x99,
	0x4e, 0x94, 0xc9, 0xfd, 0x06, 0xd6, 0x4b, 0xe3, 0x04, 0x6d, 0xd0, 0x4c, 0x0e, 0x37, 0xb4, 0x41,
	0x33, 0x31, 0x95, 0xe8, 0x22, 0xdc, 0x87, 0xf3, 0x79, 0xc7, 0x8e, 0xf5, 0xf6, 0xa8, 0x72, 0xdf,
	0x99, 0x4a, 0x53, 0x60, 0x5d, 0xee, 0x88, 0xb5, 0x58, 0x6b, 0x1a, 0x75, 0xfb, 0xfa, 0x4c, 0xba,
	0x4c, 0x01, 0x81, 0x0d, 0xb5, 0x83, 0xc4, 0xbb, 0x35, 0xaf, 0xf4, 0x44, 0x5b, 0x6b, 0xdf, 0x68,
	0x40, 0x99, 0xa9, 0x79, 0x08, 0x50, 0xf4, 0x68, 0xda, 0x9c, 0x9a, 0x68, 0x1b, 0xb5, 0x39, 0x55,
	0x6d, 0xf4, 0xba, 0x08, 0x73, 0xd8, 0xd6, 0x74, 0x39, 0xf8, 0x03, 0x0d, 0x77, 0x7d, 0x2b, 0x66,
	0xdf, 0x6a, 0x4a, 0x5e, 0xe0, 0xa6, 0xf6, 0x0b, 0x5a, 0xdc, 0xb4, 0xad, 0x8c, 0x16, 0x37, 0x5d,
	0xf3, 0x91, 0x5e, 0x18, 0x4a, 0xc1, 0xad, 0xbd, 0x30, 0x74, 0x9d, 0x80, 0xf6, 0xc2, 0xd0, 0xd4,
	0xee, 0x5d, 0x84, 0x43, 0xd8, 0x9a, 0xa8, 0x6b, 0xf1, 0xcd, 0x1a, 0x76, 0x5d, 0xe1, 0x6d, 0xbf,
	0xdf, 0x8c, 0x38, 0xd3, 0x77, 0x0a, 0x78, 0xb2, 0xdc, 0xc1, 0xba, 0x03, 0xa8, 0xad, 0xc8, 0xec,
	0x9b, 0x0d, 0xa9, 0x0b, 0x17, 0x27, 0xaa, 0x0a, 0x3c, 0x55, 0x46, 0xa5, 0xec, 0xd1, 0xba, 0x58,
	0x53, 0xa8, 0xa4, 0x69, 0x5b, 0x7e, 0x88, 0xb5, 0x69, 0xab, 0x29, 0x0f, 0xb4, 0x69, 0x3b, 0xf9,
	0xa2, 0x77, 0xd1, 0xed, 0xb5, 0x47, 0xe7, 0xb2, 0xff, 0x77, 0x1e, 0xae, 0xca, 0x21, 0xcd, 0x87,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xd0, 0x53, 0x9f, 0x0d, 0x1d, 0x00, 0x00,
}
