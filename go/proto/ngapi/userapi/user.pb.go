// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/ngapi/userapi/user.proto

package userapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Metadata is arbitrary information associated with a capture.
type Metadata struct {
	// The key for this metadata pair. Keys do not have to be unique.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value for this metadata pair.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_2b7c1a3afa6b2ff7, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Metadata) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DatasetsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatasetsRequest) Reset()         { *m = DatasetsRequest{} }
func (m *DatasetsRequest) String() string { return proto.CompactTextString(m) }
func (*DatasetsRequest) ProtoMessage()    {}
func (*DatasetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_2b7c1a3afa6b2ff7, []int{1}
}
func (m *DatasetsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasetsRequest.Unmarshal(m, b)
}
func (m *DatasetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasetsRequest.Marshal(b, m, deterministic)
}
func (dst *DatasetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetsRequest.Merge(dst, src)
}
func (m *DatasetsRequest) XXX_Size() int {
	return xxx_messageInfo_DatasetsRequest.Size(m)
}
func (m *DatasetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetsRequest proto.InternalMessageInfo

type Dataset struct {
	// The name of the dataset.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The dataset text description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The base URL under which this dataset's assets are exposed.
	Urlbase string `protobuf:"bytes,3,opt,name=urlbase,proto3" json:"urlbase,omitempty"`
	// Non-zero if the dataset has been deleted.
	Deleted *timestamp.Timestamp `protobuf:"bytes,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Is the current user restricted to readonly access? If so, capture
	// submission and other write operation swill be denied.
	Readonly             bool     `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dataset) Reset()         { *m = Dataset{} }
func (m *Dataset) String() string { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()    {}
func (*Dataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_2b7c1a3afa6b2ff7, []int{2}
}
func (m *Dataset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataset.Unmarshal(m, b)
}
func (m *Dataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataset.Marshal(b, m, deterministic)
}
func (dst *Dataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset.Merge(dst, src)
}
func (m *Dataset) XXX_Size() int {
	return xxx_messageInfo_Dataset.Size(m)
}
func (m *Dataset) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset proto.InternalMessageInfo

func (m *Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dataset) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dataset) GetUrlbase() string {
	if m != nil {
		return m.Urlbase
	}
	return ""
}

func (m *Dataset) GetDeleted() *timestamp.Timestamp {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Dataset) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

type TempCaptureRequest struct {
	Notification         string      `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	Urls                 []string    `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
	Meta                 []*Metadata `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TempCaptureRequest) Reset()         { *m = TempCaptureRequest{} }
func (m *TempCaptureRequest) String() string { return proto.CompactTextString(m) }
func (*TempCaptureRequest) ProtoMessage()    {}
func (*TempCaptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_2b7c1a3afa6b2ff7, []int{3}
}
func (m *TempCaptureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempCaptureRequest.Unmarshal(m, b)
}
func (m *TempCaptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempCaptureRequest.Marshal(b, m, deterministic)
}
func (dst *TempCaptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempCaptureRequest.Merge(dst, src)
}
func (m *TempCaptureRequest) XXX_Size() int {
	return xxx_messageInfo_TempCaptureRequest.Size(m)
}
func (m *TempCaptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TempCaptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TempCaptureRequest proto.InternalMessageInfo

func (m *TempCaptureRequest) GetNotification() string {
	if m != nil {
		return m.Notification
	}
	return ""
}

func (m *TempCaptureRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *TempCaptureRequest) GetMeta() []*Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

type TempCaptureResult struct {
	Assets               string   `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TempCaptureResult) Reset()         { *m = TempCaptureResult{} }
func (m *TempCaptureResult) String() string { return proto.CompactTextString(m) }
func (*TempCaptureResult) ProtoMessage()    {}
func (*TempCaptureResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_2b7c1a3afa6b2ff7, []int{4}
}
func (m *TempCaptureResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempCaptureResult.Unmarshal(m, b)
}
func (m *TempCaptureResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempCaptureResult.Marshal(b, m, deterministic)
}
func (dst *TempCaptureResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempCaptureResult.Merge(dst, src)
}
func (m *TempCaptureResult) XXX_Size() int {
	return xxx_messageInfo_TempCaptureResult.Size(m)
}
func (m *TempCaptureResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TempCaptureResult.DiscardUnknown(m)
}

var xxx_messageInfo_TempCaptureResult proto.InternalMessageInfo

func (m *TempCaptureResult) GetAssets() string {
	if m != nil {
		return m.Assets
	}
	return ""
}

func (m *TempCaptureResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Metadata)(nil), "io.netograph.user.Metadata")
	proto.RegisterType((*DatasetsRequest)(nil), "io.netograph.user.DatasetsRequest")
	proto.RegisterType((*Dataset)(nil), "io.netograph.user.Dataset")
	proto.RegisterType((*TempCaptureRequest)(nil), "io.netograph.user.TempCaptureRequest")
	proto.RegisterType((*TempCaptureResult)(nil), "io.netograph.user.TempCaptureResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	// Request a temporary capture. Temporary captures are not stored in a
	// dataset, and the capture assets will be available for download for 24
	// hours before being deleted.
	TempCapture(ctx context.Context, in *TempCaptureRequest, opts ...grpc.CallOption) (*TempCaptureResult, error)
	// List all datasets to which the authorizing account has access. This
	// includes public datasets, which will be marked readonly.
	Datasets(ctx context.Context, in *DatasetsRequest, opts ...grpc.CallOption) (User_DatasetsClient, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) TempCapture(ctx context.Context, in *TempCaptureRequest, opts ...grpc.CallOption) (*TempCaptureResult, error) {
	out := new(TempCaptureResult)
	err := c.cc.Invoke(ctx, "/io.netograph.user.User/TempCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Datasets(ctx context.Context, in *DatasetsRequest, opts ...grpc.CallOption) (User_DatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[0], "/io.netograph.user.User/Datasets", opts...)
	if err != nil {
		return nil, err
	}
	x := &userDatasetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_DatasetsClient interface {
	Recv() (*Dataset, error)
	grpc.ClientStream
}

type userDatasetsClient struct {
	grpc.ClientStream
}

func (x *userDatasetsClient) Recv() (*Dataset, error) {
	m := new(Dataset)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	// Request a temporary capture. Temporary captures are not stored in a
	// dataset, and the capture assets will be available for download for 24
	// hours before being deleted.
	TempCapture(context.Context, *TempCaptureRequest) (*TempCaptureResult, error)
	// List all datasets to which the authorizing account has access. This
	// includes public datasets, which will be marked readonly.
	Datasets(*DatasetsRequest, User_DatasetsServer) error
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_TempCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).TempCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.netograph.user.User/TempCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).TempCapture(ctx, req.(*TempCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Datasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DatasetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).Datasets(m, &userDatasetsServer{stream})
}

type User_DatasetsServer interface {
	Send(*Dataset) error
	grpc.ServerStream
}

type userDatasetsServer struct {
	grpc.ServerStream
}

func (x *userDatasetsServer) Send(m *Dataset) error {
	return x.ServerStream.SendMsg(m)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.netograph.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TempCapture",
			Handler:    _User_TempCapture_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Datasets",
			Handler:       _User_Datasets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ngapi/userapi/user.proto",
}

func init() {
	proto.RegisterFile("proto/ngapi/userapi/user.proto", fileDescriptor_user_2b7c1a3afa6b2ff7)
}

var fileDescriptor_user_2b7c1a3afa6b2ff7 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x6f, 0xd4, 0x40,
	0x0c, 0x55, 0x36, 0xdb, 0xee, 0xd6, 0x8b, 0x80, 0xb5, 0x10, 0x1a, 0x05, 0x09, 0xa2, 0x08, 0xa4,
	0x3d, 0x4d, 0xd0, 0xc2, 0x8d, 0x1b, 0x70, 0x84, 0x4b, 0x54, 0x2e, 0xbd, 0x79, 0x1b, 0x37, 0x8c,
	0x48, 0x32, 0x61, 0x3e, 0x90, 0x7a, 0xe0, 0x17, 0x71, 0xe1, 0x27, 0xa2, 0x4c, 0x26, 0xa8, 0xa5,
	0x8b, 0x7a, 0x8a, 0xfd, 0xfc, 0xc6, 0xf6, 0xf3, 0x0b, 0x3c, 0x1f, 0x8c, 0x76, 0xba, 0xec, 0x1b,
	0x1a, 0x54, 0xe9, 0x2d, 0x9b, 0xf9, 0x2b, 0x43, 0x01, 0xb7, 0x4a, 0xcb, 0x9e, 0x9d, 0x6e, 0x0c,
	0x0d, 0x5f, 0xe5, 0x58, 0xc8, 0x5e, 0x34, 0x5a, 0x37, 0x2d, 0x97, 0x81, 0x70, 0xf0, 0x57, 0xa5,
	0x53, 0x1d, 0x5b, 0x47, 0xdd, 0x30, 0xbd, 0x29, 0xf6, 0xb0, 0xfe, 0xcc, 0x8e, 0x6a, 0x72, 0x84,
	0x8f, 0x21, 0xfd, 0xc6, 0xd7, 0x22, 0xc9, 0x93, 0xdd, 0x59, 0x35, 0x86, 0xf8, 0x04, 0x4e, 0x7e,
	0x50, 0xeb, 0x59, 0x2c, 0x02, 0x36, 0x25, 0xc5, 0x16, 0x1e, 0x7d, 0x24, 0x47, 0x96, 0x9d, 0xad,
	0xf8, 0xbb, 0x67, 0xeb, 0x8a, 0x5f, 0x09, 0xac, 0x22, 0x86, 0x08, 0xcb, 0x9e, 0x3a, 0x8e, 0x7d,
	0x42, 0x8c, 0x39, 0x6c, 0x6a, 0xb6, 0x97, 0x46, 0x0d, 0x4e, 0xe9, 0x3e, 0xb6, 0xbb, 0x09, 0xa1,
	0x80, 0x95, 0x37, 0xed, 0x81, 0x2c, 0x8b, 0x34, 0x54, 0xe7, 0x14, 0xdf, 0xc2, 0xaa, 0xe6, 0x96,
	0x1d, 0xd7, 0x62, 0x99, 0x27, 0xbb, 0xcd, 0x3e, 0x93, 0x93, 0x2a, 0x39, 0xab, 0x92, 0xe7, 0xb3,
	0xaa, 0x6a, 0xa6, 0x62, 0x06, 0x6b, 0xc3, 0x54, 0xeb, 0xbe, 0xbd, 0x16, 0x27, 0x79, 0xb2, 0x5b,
	0x57, 0x7f, 0xf3, 0xe2, 0x27, 0xe0, 0x39, 0x77, 0xc3, 0x07, 0x1a, 0x9c, 0x37, 0x1c, 0x35, 0x60,
	0x01, 0x0f, 0x7a, 0xed, 0xd4, 0x95, 0xba, 0xa4, 0xb0, 0xe4, 0xb4, 0xff, 0x2d, 0x6c, 0xd4, 0xe6,
	0x4d, 0x6b, 0xc5, 0x22, 0x4f, 0x47, 0x6d, 0x63, 0x8c, 0x25, 0x2c, 0x3b, 0x76, 0x24, 0xd2, 0x3c,
	0xdd, 0x6d, 0xf6, 0xcf, 0xe4, 0x1d, 0x17, 0xe4, 0x7c, 0xe1, 0x2a, 0x10, 0x8b, 0x77, 0xb0, 0xbd,
	0x35, 0xde, 0xfa, 0xd6, 0xe1, 0x53, 0x38, 0x25, 0x3b, 0x9e, 0x34, 0xce, 0x8d, 0x19, 0x3e, 0x84,
	0x85, 0xaa, 0xe3, 0x49, 0x16, 0xaa, 0xde, 0xff, 0x4e, 0x60, 0xf9, 0xc5, 0xb2, 0xc1, 0x0b, 0xd8,
	0xdc, 0xe8, 0x82, 0xaf, 0x8e, 0xcc, 0xbd, 0x2b, 0x32, 0x7b, 0x79, 0x1f, 0x2d, 0x2c, 0xf3, 0x09,
	0xd6, 0xb3, 0xc3, 0x58, 0x1c, 0x79, 0xf1, 0x8f, 0xfd, 0x59, 0xf6, 0x7f, 0xce, 0xeb, 0xe4, 0xfd,
	0xd9, 0xc5, 0x2a, 0xfe, 0xad, 0x87, 0xd3, 0x60, 0xd9, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x4f, 0x21, 0xd7, 0x3b, 0xcb, 0x02, 0x00, 0x00,
}
